// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC1155OpenGlipProxy extends ethereum.Event {
  get params(): ERC1155OpenGlipProxy__Params {
    return new ERC1155OpenGlipProxy__Params(this);
  }
}

export class ERC1155OpenGlipProxy__Params {
  _event: ERC1155OpenGlipProxy;

  constructor(event: ERC1155OpenGlipProxy) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ERC1155OpenGlipFactoryC2 extends ethereum.SmartContract {
  static bind(address: Address): ERC1155OpenGlipFactoryC2 {
    return new ERC1155OpenGlipFactoryC2("ERC1155OpenGlipFactoryC2", address);
  }

  beacon(): Address {
    let result = super.call("beacon", "beacon():(address)", []);

    return result[0].toAddress();
  }

  try_beacon(): ethereum.CallResult<Address> {
    let result = super.tryCall("beacon", "beacon():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  create(
    to: Address,
    _name: string,
    _symbol: string,
    _global: boolean,
    baseURI: string,
    contractURI: string,
    salt: BigInt
  ): Address {
    let result = super.call(
      "create",
      "create(address,string,string,bool,string,string,uint256):(address)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromBoolean(_global),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromString(contractURI),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );

    return result[0].toAddress();
  }

  try_create(
    to: Address,
    _name: string,
    _symbol: string,
    _global: boolean,
    baseURI: string,
    contractURI: string,
    salt: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "create",
      "create(address,string,string,bool,string,string,uint256):(address)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromBoolean(_global),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromString(contractURI),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createToken(
    to: Address,
    _name: string,
    _symbol: string,
    _global: boolean,
    baseURI: string,
    contractURI: string,
    salt: BigInt
  ): Address {
    let result = super.call(
      "createToken",
      "createToken(address,string,string,bool,string,string,uint256):(address)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromBoolean(_global),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromString(contractURI),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );

    return result[0].toAddress();
  }

  try_createToken(
    to: Address,
    _name: string,
    _symbol: string,
    _global: boolean,
    baseURI: string,
    contractURI: string,
    salt: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createToken",
      "createToken(address,string,string,bool,string,string,uint256):(address)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromBoolean(_global),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromString(contractURI),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAddress(
    _name: string,
    _symbol: string,
    _global: boolean,
    baseURI: string,
    contractURI: string,
    salt: BigInt
  ): Address {
    let result = super.call(
      "getAddress",
      "getAddress(string,string,bool,string,string,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromBoolean(_global),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromString(contractURI),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );

    return result[0].toAddress();
  }

  try_getAddress(
    _name: string,
    _symbol: string,
    _global: boolean,
    baseURI: string,
    contractURI: string,
    salt: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAddress",
      "getAddress(string,string,bool,string,string,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromBoolean(_global),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromString(contractURI),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _beacon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transferProxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _lazyTransferProxy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _defaultMinter(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _forwarder(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _global(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get baseURI(): string {
    return this._call.inputValues[4].value.toString();
  }

  get contractURI(): string {
    return this._call.inputValues[5].value.toString();
  }

  get salt(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _global(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get baseURI(): string {
    return this._call.inputValues[4].value.toString();
  }

  get contractURI(): string {
    return this._call.inputValues[5].value.toString();
  }

  get salt(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateExchangeMinterForwarderCall extends ethereum.Call {
  get inputs(): UpdateExchangeMinterForwarderCall__Inputs {
    return new UpdateExchangeMinterForwarderCall__Inputs(this);
  }

  get outputs(): UpdateExchangeMinterForwarderCall__Outputs {
    return new UpdateExchangeMinterForwarderCall__Outputs(this);
  }
}

export class UpdateExchangeMinterForwarderCall__Inputs {
  _call: UpdateExchangeMinterForwarderCall;

  constructor(call: UpdateExchangeMinterForwarderCall) {
    this._call = call;
  }

  get _transferProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lazyTransferProxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _defaultMinter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _forwarder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class UpdateExchangeMinterForwarderCall__Outputs {
  _call: UpdateExchangeMinterForwarderCall;

  constructor(call: UpdateExchangeMinterForwarderCall) {
    this._call = call;
  }
}
