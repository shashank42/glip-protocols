// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MatchedOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MatchedOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MatchedOrder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MatchedOrder", id.toString(), this);
    }
  }

  static load(id: string): MatchedOrder | null {
    return changetype<MatchedOrder | null>(store.get("MatchedOrder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bidMaker(): string | null {
    let value = this.get("bidMaker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidMaker(value: string | null) {
    if (!value) {
      this.unset("bidMaker");
    } else {
      this.set("bidMaker", Value.fromString(<string>value));
    }
  }

  get bidTaker(): string | null {
    let value = this.get("bidTaker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidTaker(value: string | null) {
    if (!value) {
      this.unset("bidTaker");
    } else {
      this.set("bidTaker", Value.fromString(<string>value));
    }
  }

  get auctionMaker(): string | null {
    let value = this.get("auctionMaker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auctionMaker(value: string | null) {
    if (!value) {
      this.unset("auctionMaker");
    } else {
      this.set("auctionMaker", Value.fromString(<string>value));
    }
  }

  get auctionTaker(): string | null {
    let value = this.get("auctionTaker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auctionTaker(value: string | null) {
    if (!value) {
      this.unset("auctionTaker");
    } else {
      this.set("auctionTaker", Value.fromString(<string>value));
    }
  }

  get auctioneer(): string | null {
    let value = this.get("auctioneer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auctioneer(value: string | null) {
    if (!value) {
      this.unset("auctioneer");
    } else {
      this.set("auctioneer", Value.fromString(<string>value));
    }
  }

  get minter(): string | null {
    let value = this.get("minter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minter(value: string | null) {
    if (!value) {
      this.unset("minter");
    } else {
      this.set("minter", Value.fromString(<string>value));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (!value) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(<BigInt>value));
    }
  }
}
