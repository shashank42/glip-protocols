// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CreateERC721GlipLive extends ethereum.Event {
  get params(): CreateERC721GlipLive__Params {
    return new CreateERC721GlipLive__Params(this);
  }
}

export class CreateERC721GlipLive__Params {
  _event: CreateERC721GlipLive;

  constructor(event: CreateERC721GlipLive) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Creators extends ethereum.Event {
  get params(): Creators__Params {
    return new Creators__Params(this);
  }
}

export class Creators__Params {
  _event: Creators;

  constructor(event: Creators) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creators(): Array<CreatorsCreatorsStruct> {
    return this._event.parameters[1].value.toTupleArray<
      CreatorsCreatorsStruct
    >();
  }
}

export class CreatorsCreatorsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class DefaultApproval extends ethereum.Event {
  get params(): DefaultApproval__Params {
    return new DefaultApproval__Params(this);
  }
}

export class DefaultApproval__Params {
  _event: DefaultApproval;

  constructor(event: DefaultApproval) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get hasApproval(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoyaltiesSet extends ethereum.Event {
  get params(): RoyaltiesSet__Params {
    return new RoyaltiesSet__Params(this);
  }
}

export class RoyaltiesSet__Params {
  _event: RoyaltiesSet;

  constructor(event: RoyaltiesSet) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get royalties(): Array<RoyaltiesSetRoyaltiesStruct> {
    return this._event.parameters[2].value.toTupleArray<
      RoyaltiesSetRoyaltiesStruct
    >();
  }
}

export class RoyaltiesSetRoyaltiesStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class SaveCreatorSignedRoyalty extends ethereum.Event {
  get params(): SaveCreatorSignedRoyalty__Params {
    return new SaveCreatorSignedRoyalty__Params(this);
  }
}

export class SaveCreatorSignedRoyalty__Params {
  _event: SaveCreatorSignedRoyalty;

  constructor(event: SaveCreatorSignedRoyalty) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get royalty(): SaveCreatorSignedRoyaltyRoyaltyStruct {
    return changetype<SaveCreatorSignedRoyaltyRoyaltyStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class SaveCreatorSignedRoyaltyRoyaltyStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class SaveRoyaltySplitter extends ethereum.Event {
  get params(): SaveRoyaltySplitter__Params {
    return new SaveRoyaltySplitter__Params(this);
  }
}

export class SaveRoyaltySplitter__Params {
  _event: SaveRoyaltySplitter;

  constructor(event: SaveRoyaltySplitter) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get royaltySplitterBytes(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ERC721GlipLive__decodeLazyMintDataResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get reserve(): BigInt {
    return this[1].toBigInt();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get payouts(): Array<
    ERC721GlipLive__decodeLazyMintDataResultValue0PayoutsStruct
  > {
    return this[3].toTupleArray<
      ERC721GlipLive__decodeLazyMintDataResultValue0PayoutsStruct
    >();
  }

  get minter(): ERC721GlipLive__decodeLazyMintDataResultValue0MinterStruct {
    return changetype<
      ERC721GlipLive__decodeLazyMintDataResultValue0MinterStruct
    >(this[4].toTuple());
  }

  get royalty(): ERC721GlipLive__decodeLazyMintDataResultValue0RoyaltyStruct {
    return changetype<
      ERC721GlipLive__decodeLazyMintDataResultValue0RoyaltyStruct
    >(this[5].toTuple());
  }
}

export class ERC721GlipLive__decodeLazyMintDataResultValue0PayoutsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class ERC721GlipLive__decodeLazyMintDataResultValue0MinterStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class ERC721GlipLive__decodeLazyMintDataResultValue0RoyaltyStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class ERC721GlipLive__encodeLazyMintDataInputDataStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get reserve(): BigInt {
    return this[1].toBigInt();
  }

  get tokenURI(): string {
    return this[2].toString();
  }

  get creator(): Address {
    return this[3].toAddress();
  }

  get minter(): Address {
    return this[4].toAddress();
  }

  get creators(): Array<
    ERC721GlipLive__encodeLazyMintDataInputDataCreatorsStruct
  > {
    return this[5].toTupleArray<
      ERC721GlipLive__encodeLazyMintDataInputDataCreatorsStruct
    >();
  }

  get royalty(): ERC721GlipLive__encodeLazyMintDataInputDataRoyaltyStruct {
    return changetype<ERC721GlipLive__encodeLazyMintDataInputDataRoyaltyStruct>(
      this[6].toTuple()
    );
  }

  get signature(): Bytes {
    return this[7].toBytes();
  }
}

export class ERC721GlipLive__encodeLazyMintDataInputDataCreatorsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class ERC721GlipLive__encodeLazyMintDataInputDataRoyaltyStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class ERC721GlipLive__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ERC721GlipLive extends ethereum.SmartContract {
  static bind(address: Address): ERC721GlipLive {
    return new ERC721GlipLive("ERC721GlipLive", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  burned(_id: BigInt): boolean {
    let result = super.call("burned", "burned(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBoolean();
  }

  try_burned(_id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("burned", "burned(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decodeLazyMintData(
    encoded: Bytes
  ): ERC721GlipLive__decodeLazyMintDataResultValue0Struct {
    let result = super.call(
      "decodeLazyMintData",
      "decodeLazyMintData(bytes):((uint256,uint256,address,(address,uint96)[],(address,uint96),(address,uint96)))",
      [ethereum.Value.fromBytes(encoded)]
    );

    return changetype<ERC721GlipLive__decodeLazyMintDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_decodeLazyMintData(
    encoded: Bytes
  ): ethereum.CallResult<ERC721GlipLive__decodeLazyMintDataResultValue0Struct> {
    let result = super.tryCall(
      "decodeLazyMintData",
      "decodeLazyMintData(bytes):((uint256,uint256,address,(address,uint96)[],(address,uint96),(address,uint96)))",
      [ethereum.Value.fromBytes(encoded)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ERC721GlipLive__decodeLazyMintDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  encodeLazyMintData(
    data: ERC721GlipLive__encodeLazyMintDataInputDataStruct
  ): Bytes {
    let result = super.call(
      "encodeLazyMintData",
      "encodeLazyMintData((uint256,uint256,string,address,address,(address,uint96)[],(address,uint96),bytes)):(bytes)",
      [ethereum.Value.fromTuple(data)]
    );

    return result[0].toBytes();
  }

  try_encodeLazyMintData(
    data: ERC721GlipLive__encodeLazyMintDataInputDataStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encodeLazyMintData",
      "encodeLazyMintData((uint256,uint256,string,address,address,(address,uint96)[],(address,uint96),bytes)):(bytes)",
      [ethereum.Value.fromTuple(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  exists(_id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(_id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): ERC721GlipLive__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );

    return new ERC721GlipLive__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): ethereum.CallResult<ERC721GlipLive__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721GlipLive__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class __ERC721GlipLive_initCall extends ethereum.Call {
  get inputs(): __ERC721GlipLive_initCall__Inputs {
    return new __ERC721GlipLive_initCall__Inputs(this);
  }

  get outputs(): __ERC721GlipLive_initCall__Outputs {
    return new __ERC721GlipLive_initCall__Outputs(this);
  }
}

export class __ERC721GlipLive_initCall__Inputs {
  _call: __ERC721GlipLive_initCall;

  constructor(call: __ERC721GlipLive_initCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _global(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get baseURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get contractURI(): string {
    return this._call.inputValues[4].value.toString();
  }

  get exchangeProxy(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get defaultMinter(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class __ERC721GlipLive_initCall__Outputs {
  _call: __ERC721GlipLive_initCall;

  constructor(call: __ERC721GlipLive_initCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class MintAndTransferEncodedDataCall extends ethereum.Call {
  get inputs(): MintAndTransferEncodedDataCall__Inputs {
    return new MintAndTransferEncodedDataCall__Inputs(this);
  }

  get outputs(): MintAndTransferEncodedDataCall__Outputs {
    return new MintAndTransferEncodedDataCall__Outputs(this);
  }
}

export class MintAndTransferEncodedDataCall__Inputs {
  _call: MintAndTransferEncodedDataCall;

  constructor(call: MintAndTransferEncodedDataCall) {
    this._call = call;
  }

  get encoded(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintAndTransferEncodedDataCall__Outputs {
  _call: MintAndTransferEncodedDataCall;

  constructor(call: MintAndTransferEncodedDataCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferFromOrMintCall extends ethereum.Call {
  get inputs(): TransferFromOrMintCall__Inputs {
    return new TransferFromOrMintCall__Inputs(this);
  }

  get outputs(): TransferFromOrMintCall__Outputs {
    return new TransferFromOrMintCall__Outputs(this);
  }
}

export class TransferFromOrMintCall__Inputs {
  _call: TransferFromOrMintCall;

  constructor(call: TransferFromOrMintCall) {
    this._call = call;
  }

  get data(): TransferFromOrMintCallDataStruct {
    return changetype<TransferFromOrMintCallDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferFromOrMintCall__Outputs {
  _call: TransferFromOrMintCall;

  constructor(call: TransferFromOrMintCall) {
    this._call = call;
  }
}

export class TransferFromOrMintCallDataStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get reserve(): BigInt {
    return this[1].toBigInt();
  }

  get tokenURI(): string {
    return this[2].toString();
  }

  get creator(): Address {
    return this[3].toAddress();
  }

  get minter(): Address {
    return this[4].toAddress();
  }

  get creators(): Array<TransferFromOrMintCallDataCreatorsStruct> {
    return this[5].toTupleArray<TransferFromOrMintCallDataCreatorsStruct>();
  }

  get royalty(): TransferFromOrMintCallDataRoyaltyStruct {
    return changetype<TransferFromOrMintCallDataRoyaltyStruct>(
      this[6].toTuple()
    );
  }

  get signature(): Bytes {
    return this[7].toBytes();
  }
}

export class TransferFromOrMintCallDataCreatorsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class TransferFromOrMintCallDataRoyaltyStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
