// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionMatched extends ethereum.Event {
  get params(): AuctionMatched__Params {
    return new AuctionMatched__Params(this);
  }
}

export class AuctionMatched__Params {
  _event: AuctionMatched;

  constructor(event: AuctionMatched) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get min(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BidMatched extends ethereum.Event {
  get params(): BidMatched__Params {
    return new BidMatched__Params(this);
  }
}

export class BidMatched__Params {
  _event: BidMatched;

  constructor(event: BidMatched) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get auctioneer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Auction__verifyOrderMatchResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get reserve(): BigInt {
    return this[1].toBigInt();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get payouts(): Array<Auction__verifyOrderMatchResultValue0PayoutsStruct> {
    return this[3].toTupleArray<
      Auction__verifyOrderMatchResultValue0PayoutsStruct
    >();
  }

  get minter(): Auction__verifyOrderMatchResultValue0MinterStruct {
    return changetype<Auction__verifyOrderMatchResultValue0MinterStruct>(
      this[4].toTuple()
    );
  }

  get royalty(): Auction__verifyOrderMatchResultValue0RoyaltyStruct {
    return changetype<Auction__verifyOrderMatchResultValue0RoyaltyStruct>(
      this[5].toTuple()
    );
  }
}

export class Auction__verifyOrderMatchResultValue0PayoutsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class Auction__verifyOrderMatchResultValue0MinterStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class Auction__verifyOrderMatchResultValue0RoyaltyStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class Auction__verifyOrderMatchResult {
  value0: Auction__verifyOrderMatchResultValue0Struct;
  value1: BigInt;

  constructor(
    value0: Auction__verifyOrderMatchResultValue0Struct,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Auction__verifyOrderMatchInput_bidStruct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get auctioneer(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get value(): BigInt {
    return this[5].toBigInt();
  }

  get start(): BigInt {
    return this[6].toBigInt();
  }

  get end(): BigInt {
    return this[7].toBigInt();
  }

  get tokenData(): Bytes {
    return this[8].toBytes();
  }

  get signature(): Bytes {
    return this[9].toBytes();
  }
}

export class Auction__verifyOrderMatchInput_auctionStruct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get min(): BigInt {
    return this[4].toBigInt();
  }

  get start(): BigInt {
    return this[5].toBigInt();
  }

  get end(): BigInt {
    return this[6].toBigInt();
  }

  get signature(): Bytes {
    return this[7].toBytes();
  }
}

export class Auction extends ethereum.SmartContract {
  static bind(address: Address): Auction {
    return new Auction("Auction", address);
  }

  auctioneer(): Address {
    let result = super.call("auctioneer", "auctioneer():(address)", []);

    return result[0].toAddress();
  }

  try_auctioneer(): ethereum.CallResult<Address> {
    let result = super.tryCall("auctioneer", "auctioneer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStake(addr: Address): BigInt {
    let result = super.call("getStake", "getStake(address):(uint256)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBigInt();
  }

  try_getStake(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getStake", "getStake(address):(uint256)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint96)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stake(param0: Address): BigInt {
    let result = super.call("stake", "stake(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_stake(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stake", "stake(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifyOrderMatch(
    _bid: Auction__verifyOrderMatchInput_bidStruct,
    _auction: Auction__verifyOrderMatchInput_auctionStruct
  ): Auction__verifyOrderMatchResult {
    let result = super.call(
      "verifyOrderMatch",
      "verifyOrderMatch((address,address,address,address,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,uint256,uint256,uint256,uint256,bytes)):((uint256,uint256,address,(address,uint96)[],(address,uint96),(address,uint96)),uint96)",
      [ethereum.Value.fromTuple(_bid), ethereum.Value.fromTuple(_auction)]
    );

    return changetype<Auction__verifyOrderMatchResult>(
      new Auction__verifyOrderMatchResult(
        changetype<Auction__verifyOrderMatchResultValue0Struct>(
          result[0].toTuple()
        ),
        result[1].toBigInt()
      )
    );
  }

  try_verifyOrderMatch(
    _bid: Auction__verifyOrderMatchInput_bidStruct,
    _auction: Auction__verifyOrderMatchInput_auctionStruct
  ): ethereum.CallResult<Auction__verifyOrderMatchResult> {
    let result = super.tryCall(
      "verifyOrderMatch",
      "verifyOrderMatch((address,address,address,address,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,uint256,uint256,uint256,uint256,bytes)):((uint256,uint256,address,(address,uint96)[],(address,uint96),(address,uint96)),uint96)",
      [ethereum.Value.fromTuple(_bid), ethereum.Value.fromTuple(_auction)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Auction__verifyOrderMatchResult>(
        new Auction__verifyOrderMatchResult(
          changetype<Auction__verifyOrderMatchResultValue0Struct>(
            value[0].toTuple()
          ),
          value[1].toBigInt()
        )
      )
    );
  }
}

export class __Auction_initCall extends ethereum.Call {
  get inputs(): __Auction_initCall__Inputs {
    return new __Auction_initCall__Inputs(this);
  }

  get outputs(): __Auction_initCall__Outputs {
    return new __Auction_initCall__Outputs(this);
  }
}

export class __Auction_initCall__Inputs {
  _call: __Auction_initCall;

  constructor(call: __Auction_initCall) {
    this._call = call;
  }

  get _platformFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _auctioneer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class __Auction_initCall__Outputs {
  _call: __Auction_initCall;

  constructor(call: __Auction_initCall) {
    this._call = call;
  }
}

export class ExecuteLazyAuctionCall extends ethereum.Call {
  get inputs(): ExecuteLazyAuctionCall__Inputs {
    return new ExecuteLazyAuctionCall__Inputs(this);
  }

  get outputs(): ExecuteLazyAuctionCall__Outputs {
    return new ExecuteLazyAuctionCall__Outputs(this);
  }
}

export class ExecuteLazyAuctionCall__Inputs {
  _call: ExecuteLazyAuctionCall;

  constructor(call: ExecuteLazyAuctionCall) {
    this._call = call;
  }

  get _bid(): ExecuteLazyAuctionCall_bidStruct {
    return changetype<ExecuteLazyAuctionCall_bidStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _auction(): ExecuteLazyAuctionCall_auctionStruct {
    return changetype<ExecuteLazyAuctionCall_auctionStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ExecuteLazyAuctionCall__Outputs {
  _call: ExecuteLazyAuctionCall;

  constructor(call: ExecuteLazyAuctionCall) {
    this._call = call;
  }
}

export class ExecuteLazyAuctionCall_bidStruct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get auctioneer(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get value(): BigInt {
    return this[5].toBigInt();
  }

  get start(): BigInt {
    return this[6].toBigInt();
  }

  get end(): BigInt {
    return this[7].toBigInt();
  }

  get tokenData(): Bytes {
    return this[8].toBytes();
  }

  get signature(): Bytes {
    return this[9].toBytes();
  }
}

export class ExecuteLazyAuctionCall_auctionStruct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get min(): BigInt {
    return this[4].toBigInt();
  }

  get start(): BigInt {
    return this[5].toBigInt();
  }

  get end(): BigInt {
    return this[6].toBigInt();
  }

  get signature(): Bytes {
    return this[7].toBytes();
  }
}

export class PutStakeCall extends ethereum.Call {
  get inputs(): PutStakeCall__Inputs {
    return new PutStakeCall__Inputs(this);
  }

  get outputs(): PutStakeCall__Outputs {
    return new PutStakeCall__Outputs(this);
  }
}

export class PutStakeCall__Inputs {
  _call: PutStakeCall;

  constructor(call: PutStakeCall) {
    this._call = call;
  }
}

export class PutStakeCall__Outputs {
  _call: PutStakeCall;

  constructor(call: PutStakeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPlatformFeeCall extends ethereum.Call {
  get inputs(): SetPlatformFeeCall__Inputs {
    return new SetPlatformFeeCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeCall__Outputs {
    return new SetPlatformFeeCall__Outputs(this);
  }
}

export class SetPlatformFeeCall__Inputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }

  get _platformFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPlatformFeeCall__Outputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }
}

export class TransferAssetContractCall extends ethereum.Call {
  get inputs(): TransferAssetContractCall__Inputs {
    return new TransferAssetContractCall__Inputs(this);
  }

  get outputs(): TransferAssetContractCall__Outputs {
    return new TransferAssetContractCall__Outputs(this);
  }
}

export class TransferAssetContractCall__Inputs {
  _call: TransferAssetContractCall;

  constructor(call: TransferAssetContractCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nft(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferAssetContractCall__Outputs {
  _call: TransferAssetContractCall;

  constructor(call: TransferAssetContractCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VerifyOrderMatchCall extends ethereum.Call {
  get inputs(): VerifyOrderMatchCall__Inputs {
    return new VerifyOrderMatchCall__Inputs(this);
  }

  get outputs(): VerifyOrderMatchCall__Outputs {
    return new VerifyOrderMatchCall__Outputs(this);
  }
}

export class VerifyOrderMatchCall__Inputs {
  _call: VerifyOrderMatchCall;

  constructor(call: VerifyOrderMatchCall) {
    this._call = call;
  }

  get _bid(): VerifyOrderMatchCall_bidStruct {
    return changetype<VerifyOrderMatchCall_bidStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _auction(): VerifyOrderMatchCall_auctionStruct {
    return changetype<VerifyOrderMatchCall_auctionStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class VerifyOrderMatchCall__Outputs {
  _call: VerifyOrderMatchCall;

  constructor(call: VerifyOrderMatchCall) {
    this._call = call;
  }

  get value0(): VerifyOrderMatchCallValue0Struct {
    return changetype<VerifyOrderMatchCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class VerifyOrderMatchCall_bidStruct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get auctioneer(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get value(): BigInt {
    return this[5].toBigInt();
  }

  get start(): BigInt {
    return this[6].toBigInt();
  }

  get end(): BigInt {
    return this[7].toBigInt();
  }

  get tokenData(): Bytes {
    return this[8].toBytes();
  }

  get signature(): Bytes {
    return this[9].toBytes();
  }
}

export class VerifyOrderMatchCall_auctionStruct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get min(): BigInt {
    return this[4].toBigInt();
  }

  get start(): BigInt {
    return this[5].toBigInt();
  }

  get end(): BigInt {
    return this[6].toBigInt();
  }

  get signature(): Bytes {
    return this[7].toBytes();
  }
}

export class VerifyOrderMatchCallValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get reserve(): BigInt {
    return this[1].toBigInt();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get payouts(): Array<VerifyOrderMatchCallValue0PayoutsStruct> {
    return this[3].toTupleArray<VerifyOrderMatchCallValue0PayoutsStruct>();
  }

  get minter(): VerifyOrderMatchCallValue0MinterStruct {
    return changetype<VerifyOrderMatchCallValue0MinterStruct>(
      this[4].toTuple()
    );
  }

  get royalty(): VerifyOrderMatchCallValue0RoyaltyStruct {
    return changetype<VerifyOrderMatchCallValue0RoyaltyStruct>(
      this[5].toTuple()
    );
  }
}

export class VerifyOrderMatchCallValue0PayoutsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class VerifyOrderMatchCallValue0MinterStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class VerifyOrderMatchCallValue0RoyaltyStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class WithdrawOnBehalfCall extends ethereum.Call {
  get inputs(): WithdrawOnBehalfCall__Inputs {
    return new WithdrawOnBehalfCall__Inputs(this);
  }

  get outputs(): WithdrawOnBehalfCall__Outputs {
    return new WithdrawOnBehalfCall__Outputs(this);
  }
}

export class WithdrawOnBehalfCall__Inputs {
  _call: WithdrawOnBehalfCall;

  constructor(call: WithdrawOnBehalfCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawOnBehalfCall__Outputs {
  _call: WithdrawOnBehalfCall;

  constructor(call: WithdrawOnBehalfCall) {
    this._call = call;
  }
}

export class WithdrawStakeCall extends ethereum.Call {
  get inputs(): WithdrawStakeCall__Inputs {
    return new WithdrawStakeCall__Inputs(this);
  }

  get outputs(): WithdrawStakeCall__Outputs {
    return new WithdrawStakeCall__Outputs(this);
  }
}

export class WithdrawStakeCall__Inputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawStakeCall__Outputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }
}
