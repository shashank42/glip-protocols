{"metadata":"{\"compiler\":{\"version\":\"0.7.5\"},\"sources\":{\"contracts/roles/AuctioneerUpgradable.sol\":{\"content\":\"\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"./../tokens/@rarible/libraries/contracts/LibSignature.sol\\\";\\nimport \\\"./../tokens/erc-1271/ERC1271.sol\\\";\\nimport \\\"./IAuctioneerUpgradeable.sol\\\";\\nimport \\\"./LibAuctioneer.sol\\\";\\nimport \\\"./RolesValidator.sol\\\";\\n\\ncontract AuctioneerUpgradable is ERC1271, OwnableUpgradeable, ERC165Upgradeable, IAuctioneerUpgradeable, RolesValidator {\\n\\n    using LibSignature for bytes32;\\n    using AddressUpgradeable for address;\\n\\n    event DefaultAuctioneer(address indexed auctioneer, uint96 fee, bool active);\\n    event ChangeRegistrationFee(uint256 fee);\\n    event RegisteredAuctioneer(address indexed auctioneer);\\n    event Banned(address indexed auctioneer, bool isBanned);\\n    event UpsertAuctioneer(address indexed token, address indexed minter, address indexed auctioneer, bool active, uint8 auctionType, uint96 fee, uint256 cancelValue, uint256 start, uint256 end);\\n\\n\\n    struct Auctioneer {\\n        bool active;\\n        uint8 auctionType;\\n        uint96 fee;\\n        uint256 cancelValue;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    // Default auctioneers\\n    mapping(address => Auctioneer) private defaults;\\n\\n    // Creator approved auctioneers\\n    mapping(address => mapping(address => mapping(address => Auctioneer))) private auctioneers;\\n\\n    // Auctioneer registration fee\\n    uint256 public registrationFee;\\n\\n    // Registered addresses \\n    mapping(address => bool) public registered;\\n    mapping(address => bool) public banned;\\n\\n\\n    function __AuctioneerUpgradable_init (address _auctioneer, uint96 _fee) public initializer {\\n        __Ownable_init();\\n        __ERC165_init_unchained();\\n        _registerInterface(ERC1271_INTERFACE_ID);\\n        upsertDefault(_auctioneer, _fee, true);\\n    }\\n\\n    function upsertDefault(address _auctioneer, uint96 _fee, bool active ) public onlyOwner {\\n        defaults[_auctioneer] = Auctioneer(active, 0, _fee, 0, 0, 0);\\n        emit DefaultAuctioneer(_auctioneer, _fee, active);\\n    }\\n\\n    function getDefault(address _auctioneer) external view returns (Auctioneer memory) {\\n        return defaults[_auctioneer];\\n    }\\n\\n    function getDefaultFee(address _auctioneer) public view returns (uint96) {\\n        return defaults[_auctioneer].fee;\\n    }\\n\\n    function setRegistrationFee(uint256 _registrationFee)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        registrationFee = _registrationFee;\\n        emit ChangeRegistrationFee(_registrationFee);\\n    }\\n\\n\\n    function register() external payable virtual {\\n        require(msg.value == registrationFee, \\\"Registration fee\\\");\\n        registered[_msgSender()] = true;\\n        emit RegisteredAuctioneer(_msgSender());\\n    }\\n\\n    function ban(address _auctioneer, bool _isBanned) external virtual onlyOwner {\\n        banned[_auctioneer] = _isBanned;\\n        emit Banned(_auctioneer, _isBanned);\\n    }\\n\\n    // Auctioneer needs to get the form signed by the creator and submits to the contract\\n    function upsert(address _token, LibAuctioneer.Auctioneer memory data) public virtual {\\n        \\n        require(registered[data.auctioneer], \\\"Not registered\\\");\\n        require(!banned[data.auctioneer], \\\"Banned\\\");\\n\\n        bytes32 hash = LibAuctioneer.hash(data);\\n\\n        // Check if auctioneer and minter gave signature\\n        validate(data.auctioneer, hash, data.signatures[0]);\\n        validate(data.minter, hash, data.signatures[1]);\\n\\n        auctioneers[_token][data.minter][data.auctioneer] = Auctioneer(\\n            true,\\n            data.auctionType,\\n            data.fee,\\n            data.cancelValue,\\n            data.start,\\n            data.end\\n        );\\n        emit UpsertAuctioneer(_token, data.minter, data.auctioneer, true, data.auctionType, data.fee, data.cancelValue, data.start, data.end);\\n    }\\n\\n    function cancel(address _token, address _auctioneer) public payable virtual {\\n        require(\\n            msg.value == auctioneers[_token][_msgSender()][_auctioneer].cancelValue,\\n            \\\"Cancel charge\\\"\\n        );\\n        delete auctioneers[_token][_msgSender()][_auctioneer];\\n        emit UpsertAuctioneer(_token, _msgSender(), _auctioneer, false, 0, 0, 0, 0, 0);\\n    }\\n\\n    function get(address _token, address _minter, address _auctioneer)\\n        public\\n        view\\n        virtual\\n        returns (Auctioneer memory)\\n    {\\n        return auctioneers[_token][_minter][_auctioneer];\\n    }\\n\\n    function getFee(address _token, address _minter, address _signer, uint8 _auctionType)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint96)\\n    {\\n\\n        // Allowing self signed\\n        if (_signer == _minter) return 0;\\n\\n        require(!banned[_signer], \\\"Banned\\\");\\n\\n        if(auctioneers[_token][_minter][_signer].active\\n            && auctioneers[_token][_minter][_signer].auctionType == _auctionType\\n            && block.timestamp >= auctioneers[_token][_minter][_signer].start\\n            && block.timestamp <= auctioneers[_token][_minter][_signer].end){\\n                return auctioneers[_token][_minter][_signer].fee;\\n        }\\n\\n        // If minter is default minter\\n        if (defaults[_signer].active) return getDefaultFee(_signer);\\n\\n        revert(\\\"No auctioneer\\\");\\n    }\\n\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public virtual override view returns (bytes4){\\n\\n        address signerFromSig;\\n        if (_signature.length == 65) {\\n            signerFromSig = _hash.recover(_signature);\\n            if (defaults[signerFromSig].active) {\\n                return returnIsValidSignatureMagicNumber(true);\\n            }\\n        }\\n        return returnIsValidSignatureMagicNumber(false);\\n\\n    }\\n\\n    uint256[50] private __gap;\\n\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _setOwnership(msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwnership(address(0));\\n    }\\n\\n    function _setOwnership(address newOwner) internal virtual {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwnership(newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/tokens/@rarible/libraries/contracts/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\"},\"contracts/tokens/erc-1271/ERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nabstract contract ERC1271 {\\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\\n\\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x1626ba7e;\\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public virtual view returns (bytes4);\\n\\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\\n    }\\n}\"},\"contracts/roles/IAuctioneerUpgradeable.sol\":{\"content\":\"\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\ninterface IAuctioneerUpgradeable {\\n    function getFee(address _token, address _minter, address _signer, uint8 _auctionType) external view returns (uint96);\\n}\\n\"},\"contracts/roles/LibAuctioneer.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\n// https://medium.com/coinmonks/eip712-a-full-stack-example-e12185b03d54\\nlibrary LibAuctioneer {\\n\\n    bytes32 constant MINTER_FEE_TYPEHASH = keccak256(\\n        \\\"MinterFee(address auctioneer,address minter,address token,uint8 auctionType,uint96 fee,uint256 cancelValue,uint256 start,uint256 end)\\\"\\n    );\\n\\n    struct Auctioneer {\\n        address auctioneer;\\n        address minter;\\n        address token;\\n        uint8 auctionType;\\n        uint96 fee;\\n        uint256 cancelValue;\\n        uint start;\\n        uint end;\\n        bytes[] signatures;\\n    }\\n\\n    function hash(Auctioneer memory auctioneer) internal pure returns (bytes32) {\\n\\n        bytes32 hashStruct = keccak256(abi.encode(\\n            MINTER_FEE_TYPEHASH,\\n            auctioneer.auctioneer,\\n            auctioneer.minter,\\n            auctioneer.token,\\n            auctioneer.auctionType,\\n            auctioneer.fee,\\n            auctioneer.cancelValue,\\n            auctioneer.start,\\n            auctioneer.end\\n        ));\\n\\n        return hashStruct;\\n    }\\n\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/erc-1271/ERC1271Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC1271.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\nimport \\\"./../@rarible/libraries/contracts/LibSignature.sol\\\";\\n\\nabstract contract ERC1271Validator is EIP712Upgradeable {\\n    using AddressUpgradeable for address;\\n    using LibSignature for bytes32;\\n\\n    string constant SIGNATURE_ERROR = \\\"signature verification error\\\";\\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function validate1271(address signer, bytes32 structHash, bytes memory signature) internal view returns (address) {\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signerFromSig;\\n        if (signature.length == 65) {\\n            signerFromSig = hash.recover(signature);\\n        }\\n        if  (signerFromSig != signer) {\\n            if (signer.isContract()) {\\n                require(\\n                    ERC1271(signer).isValidSignature(hash, signature) == MAGICVALUE,\\n                    SIGNATURE_ERROR\\n                );\\n            } else {\\n                revert(SIGNATURE_ERROR);\\n            }\\n        }\\n\\n        return signerFromSig;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/roles/RolesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./../tokens/erc-1271/ERC1271Validator.sol\\\";\\n\\ncontract RolesValidator is ERC1271Validator {\\n    function __RolesValidator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Roles\\\", \\\"1\\\");\\n    }\\n\\n    function validate(address account, bytes32 hash, bytes memory signature) internal view returns(address) {\\n        return validate1271(account, hash, signature);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"}}}","address":"0xaFfE3983FC6A6e0A23c5779351992D667048C827","bytecode":"0x608060405234801561001057600080fd5b5061239b806100206000396000f3fe6080604052600436106101355760003560e01c80635590d575116100ab5780638da5cb5b1161006f5780638da5cb5b146103355780639890cdca146103575780639c8d83bb1461036c578063b2dd5c071461038c578063c320c727146103ac578063f2fde38b146103cc57610135565b80635590d575146102ad578063715018a6146102cd578063798534c3146102e2578063824c1db51461030257806387c9fdec1461031557610135565b80631aa3a008116100fd5780631aa3a008146102015780631ca931c61461020b5780631ce30181146102385780632d618a1a1461024d5780632e8199cb1461026d5780634c68f4a21461028d57610135565b806301ffc9a71461013a57806311a5e4091461017057806314c44e09146101925780631626ba7e146101b457806317932f45146101d4575b600080fd5b34801561014657600080fd5b5061015a61015536600461203b565b6103ec565b604051610167919061208f565b60405180910390f35b34801561017c57600080fd5b5061018561040f565b604051610167919061212a565b34801561019e57600080fd5b506101a761041a565b6040516101679190612251565b3480156101c057600080fd5b506101856101cf366004611ff6565b610421565b3480156101e057600080fd5b506101f46101ef366004611d8c565b610483565b604051610167919061225a565b6102096104ae565b005b34801561021757600080fd5b5061022b610226366004611d8c565b61054f565b60405161016791906121ff565b34801561024457600080fd5b506101856105cd565b34801561025957600080fd5b5061022b610268366004611ddf565b6105d2565b34801561027957600080fd5b506101f4610288366004611e21565b610666565b34801561029957600080fd5b506102096102a8366004611e74565b610859565b3480156102b957600080fd5b506102096102c8366004611e9d565b61091c565b3480156102d957600080fd5b50610209610bb7565b3480156102ee57600080fd5b506102096102fd366004611fbd565b610c25565b610209610310366004611dad565b610d7d565b34801561032157600080fd5b50610209610330366004611f94565b610ec6565b34801561034157600080fd5b5061034a610f96565b604051610167919061207b565b34801561036357600080fd5b50610185610fa5565b34801561037857600080fd5b5061015a610387366004611d8c565b610fb0565b34801561039857600080fd5b5061015a6103a7366004611d8c565b610fc6565b3480156103b857600080fd5b506102096103c7366004612063565b610fdc565b3480156103d857600080fd5b506102096103e7366004611d8c565b61107f565b6001600160e01b0319811660009081526065602052604090205460ff165b919050565b63fb855dc960e01b81565b6101315481565b60008082516041141561046f576104388484611132565b6001600160a01b038116600090815261012f602052604090205490915060ff161561046f5761046760016111b2565b91505061047d565b61047960006111b2565b9150505b92915050565b6001600160a01b0316600090815261012f60205260409020546201000090046001600160601b031690565b6101315434146104d95760405162461bcd60e51b81526004016104d090612167565b60405180910390fd5b600161013260006104e86111ce565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556105186111ce565b6001600160a01b03167f215b369bd48d11cf2511d7506b43ec3c526bafabab242b4f41420061ca6c047660405160405180910390a2565b610557611c1f565b506001600160a01b0316600090815261012f6020908152604091829020825160c081018452815460ff8082161515835261010082041693820193909352620100009092046001600160601b031692820192909252600182015460608201526002820154608082015260039091015460a082015290565b600081565b6105da611c1f565b506001600160a01b039283166000908152610130602090815260408083209486168352938152838220929094168152908352819020815160c081018352815460ff8082161515835261010082041694820194909452620100009093046001600160601b03169183019190915260018101546060830152600281015460808301526003015460a082015290565b6000836001600160a01b0316836001600160a01b0316141561068a57506000610851565b6001600160a01b0383166000908152610133602052604090205460ff16156106c45760405162461bcd60e51b81526004016104d0906121df565b6001600160a01b03808616600090815261013060209081526040808320888516845282528083209387168352929052205460ff16801561073e57506001600160a01b03858116600090815261013060209081526040808320888516845282528083209387168352929052205460ff83811661010090920416145b801561077d57506001600160a01b0380861660009081526101306020908152604080832088851684528252808320938716835292905220600201544210155b80156107bc57506001600160a01b0380861660009081526101306020908152604080832088851684528252808320938716835292905220600301544211155b1561080757506001600160a01b0384811660009081526101306020908152604080832087851684528252808320938616835292905220546201000090046001600160601b0316610851565b6001600160a01b038316600090815261012f602052604090205460ff16156108395761083283610483565b9050610851565b60405162461bcd60e51b81526004016104d0906121b8565b949350505050565b6108616111ce565b6001600160a01b0316610872610f96565b6001600160a01b0316146108bb576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b6001600160a01b0382166000818152610133602052604090819020805460ff1916841515179055517fbe490a041de95d684835a21f3975102b719d9ede8cf410d4b6b06440bf8395099061091090849061208f565b60405180910390a25050565b80516001600160a01b03166000908152610132602052604090205460ff166109565760405162461bcd60e51b81526004016104d09061213f565b80516001600160a01b03166000908152610133602052604090205460ff16156109915760405162461bcd60e51b81526004016104d0906121df565b600061099c826111d2565b90506109c68260000151828461010001516000815181106109b957fe5b6020026020010151611255565b506109e28260200151828461010001516001815181106109b957fe5b506040518060c00160405280600115158152602001836060015160ff16815260200183608001516001600160601b031681526020018360a0015181526020018360c0015181526020018360e001518152506101306000856001600160a01b03166001600160a01b03168152602001908152602001600020600084602001516001600160a01b03166001600160a01b03168152602001908152602001600020600084600001516001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a8154816001600160601b0302191690836001600160601b03160217905550606082015181600101556080820151816002015560a0820151816003015590505081600001516001600160a01b031682602001516001600160a01b0316846001600160a01b03167f69cb66faf16ca2e31361c69ac05e6d87e1e654c176ed28d8fc8c0ae1ab626e6f6001866060015187608001518860a001518960c001518a60e00151604051610baa9695949392919061209a565b60405180910390a4505050565b610bbf6111ce565b6001600160a01b0316610bd0610f96565b6001600160a01b031614610c19576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b610c236000611262565b565b610c2d6111ce565b6001600160a01b0316610c3e610f96565b6001600160a01b031614610c87576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b6040805160c0810182528215158152600060208083018281526001600160601b03878116858701908152606086018581526080870186815260a088018781526001600160a01b038d1680895261012f90975296899020975188549551935160ff199096169015151761ff00191661010060ff90941693909302929092176dffffffffffffffffffffffff0000191662010000949093169390930291909117855590516001850155516002840155905160039092019190915590517f3ba4459a210a6138b265a58dfb23e34b1401574b8680e83038035fcf97794f7d90610d70908590859061226e565b60405180910390a2505050565b6001600160a01b03821660009081526101306020526040812090610d9f6111ce565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020600101543414610dea5760405162461bcd60e51b81526004016104d090612191565b6001600160a01b03821660009081526101306020526040812090610e0c6111ce565b6001600160a01b039081168252602080830193909352604091820160009081209185168082529190935290822080546dffffffffffffffffffffffffffff19168155600181018390556002810183905560030191909155610e6b6111ce565b6001600160a01b0316836001600160a01b03167f69cb66faf16ca2e31361c69ac05e6d87e1e654c176ed28d8fc8c0ae1ab626e6f600080600080600080604051610eba9695949392919061209a565b60405180910390a45050565b600054610100900460ff1680610edf5750610edf6112be565b80610eed575060005460ff16155b610f285760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff16158015610f53576000805460ff1961ff0019909116610100171660011790555b610f5b6112cf565b610f63611380565b610f7363fb855dc960e01b611419565b610f7f83836001610c25565b8015610f91576000805461ff00191690555b505050565b6033546001600160a01b031690565b630b135d3f60e11b81565b6101336020526000908152604090205460ff1681565b6101326020526000908152604090205460ff1681565b610fe46111ce565b6001600160a01b0316610ff5610f96565b6001600160a01b03161461103e576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b6101318190556040517fa2189166d5c911346d5bb991741077435b23bcc6e38b0b7044fd044039889c4890611074908390612251565b60405180910390a150565b6110876111ce565b6001600160a01b0316611098610f96565b6001600160a01b0316146110e1576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b6001600160a01b0381166111265760405162461bcd60e51b81526004018080602001828103825260268152602001806122ae6026913960400191505060405180910390fd5b61112f81611262565b50565b6000815160411461118a576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6111a88682858561149d565b9695505050505050565b6000816111c057600061047d565b630b135d3f60e11b92915050565b3390565b6000807f391c691d2a8ef2b2d263e148d4913ef75de23118a7913be520d2a57d0e155aff836000015184602001518560400151866060015187608001518860a001518960c001518a60e00151604051602001611236999897969594939291906120d0565b60408051808303601f1901815291905280516020909101209392505050565b60006108518484846116f3565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60006112c930611973565b15905090565b600054610100900460ff16806112e857506112e86112be565b806112f6575060005460ff16155b6113315760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff1615801561135c576000805460ff1961ff0019909116610100171660011790555b611364611979565b61136c611a19565b801561112f576000805461ff001916905550565b600054610100900460ff168061139957506113996112be565b806113a7575060005460ff16155b6113e25760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff1615801561140d576000805460ff1961ff0019909116610100171660011790555b61136c6301ffc9a760e01b5b6001600160e01b03198082161415611478576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152606560205260409020805460ff19166001179055565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156114fe5760405162461bcd60e51b81526004018080602001828103825260228152602001806122d46022913960400191505060405180910390fd5b6000601e8560ff1611156115d8576004850360ff16601b148061152757506004850360ff16601c145b6115625760405162461bcd60e51b81526004018080602001828103825260228152602001806123246022913960400191505060405180910390fd5b600161156d87611ad0565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156115c7573d6000803e3d6000fd5b50505060206040510351905061168f565b8460ff16601b14806115ed57508460ff16601c145b6116285760405162461bcd60e51b81526004018080602001828103825260228152602001806123246022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611682573d6000803e3d6000fd5b5050506020604051035190505b6001600160a01b0381166116ea576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b6000806116ff84611b21565b9050600083516041141561171a576117178285611132565b90505b856001600160a01b0316816001600160a01b0316146116ea57611745866001600160a01b0316611973565b156118fb5760408051630b135d3f60e11b808252600482018581526024830193845287516044840152875191936001600160a01b038b1693631626ba7e9388938b9390929091606490910190602085019080838360005b838110156117b457818101518382015260200161179c565b50505050905090810190601f1680156117e15780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156117ff57600080fd5b505afa158015611813573d6000803e3d6000fd5b505050506040513d602081101561182957600080fd5b505160408051808201909152601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020820152916001600160e01b0319909116146118f55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118ba5781810151838201526020016118a2565b50505050905090810190601f1680156118e75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506116ea565b604080518082018252601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020808301918252925162461bcd60e51b815260048101938452825160248201528251929392839260449092019190808383600083156118ba5781810151838201526020016118a2565b3b151590565b600054610100900460ff168061199257506119926112be565b806119a0575060005460ff16155b6119db5760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff1615801561136c576000805460ff1961ff001990911661010017166001179055801561112f576000805461ff001916905550565b600054610100900460ff1680611a325750611a326112be565b80611a40575060005460ff16155b611a7b5760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff16158015611aa6576000805460ff1961ff0019909116610100171660011790555b6000611ab06111ce565b9050611abb81611262565b50801561112f576000805461ff001916905550565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000611b2b611b6d565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6000611ba87f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611b9b611bad565b611ba3611bb3565b611bb9565b905090565b60975490565b60985490565b6000838383611bc6611c1b565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b4690565b6040518060c00160405280600015158152602001600060ff16815260200160006001600160601b031681526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461040a57600080fd5b600082601f830112611c8a578081fd5b8135602067ffffffffffffffff821115611ca057fe5b611cad8182840201612289565b82815281810190858301855b85811015611ce257611cd0898684358b0101611cff565b84529284019290840190600101611cb9565b5090979650505050505050565b8035801515811461040a57600080fd5b600082601f830112611d0f578081fd5b813567ffffffffffffffff811115611d2357fe5b611d36601f8201601f1916602001612289565b818152846020838601011115611d4a578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461040a57600080fd5b80356001600160601b038116811461040a57600080fd5b600060208284031215611d9d578081fd5b611da682611c63565b9392505050565b60008060408385031215611dbf578081fd5b611dc883611c63565b9150611dd660208401611c63565b90509250929050565b600080600060608486031215611df3578081fd5b611dfc84611c63565b9250611e0a60208501611c63565b9150611e1860408501611c63565b90509250925092565b60008060008060808587031215611e36578081fd5b611e3f85611c63565b9350611e4d60208601611c63565b9250611e5b60408601611c63565b9150611e6960608601611d64565b905092959194509250565b60008060408385031215611e86578182fd5b611e8f83611c63565b9150611dd660208401611cef565b60008060408385031215611eaf578182fd5b611eb883611c63565b9150602083013567ffffffffffffffff80821115611ed4578283fd5b8185019150610120808388031215611eea578384fd5b611ef381612289565b9050611efe83611c63565b8152611f0c60208401611c63565b6020820152611f1d60408401611c63565b6040820152611f2e60608401611d64565b6060820152611f3f60808401611d75565b608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013583811115611f75578586fd5b611f8189828701611c7a565b8284015250508093505050509250929050565b60008060408385031215611fa6578182fd5b611faf83611c63565b9150611dd660208401611d75565b600080600060608486031215611fd1578283fd5b611fda84611c63565b9250611fe860208501611d75565b9150611e1860408501611cef565b60008060408385031215612008578182fd5b82359150602083013567ffffffffffffffff811115612025578182fd5b61203185828601611cff565b9150509250929050565b60006020828403121561204c578081fd5b81356001600160e01b031981168114611da6578182fd5b600060208284031215612074578081fd5b5035919050565b6001600160a01b0391909116815260200190565b901515815260200190565b951515865260ff9490941660208601526001600160601b039290921660408501526060840152608083015260a082015260c00190565b9889526001600160a01b0397881660208a0152958716604089015293909516606087015260ff9190911660808601526001600160601b031660a085015260c084019290925260e08301919091526101008201526101200190565b6001600160e01b031991909116815260200190565b6020808252600e908201526d139bdd081c9959da5cdd195c995960921b604082015260600190565b60208082526010908201526f526567697374726174696f6e2066656560801b604082015260600190565b6020808252600d908201526c43616e63656c2063686172676560981b604082015260600190565b6020808252600d908201526c27379030bab1ba34b7b732b2b960991b604082015260600190565b60208082526006908201526510985b9b995960d21b604082015260600190565b600060c08201905082511515825260ff60208401511660208301526001600160601b036040840151166040830152606083015160608301526080830151608083015260a083015160a083015292915050565b90815260200190565b6001600160601b0391909116815260200190565b6001600160601b039290921682521515602082015260400190565b60405181810167ffffffffffffffff811182821017156122a557fe5b60405291905056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c7565496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c75654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122058c6a0ee0f89f8b88bd8565b9b2754375fb7a5620b1466ad58a11d2eb02fd1ba64736f6c63430007060033","deployedBytecode":"0x6080604052600436106101355760003560e01c80635590d575116100ab5780638da5cb5b1161006f5780638da5cb5b146103355780639890cdca146103575780639c8d83bb1461036c578063b2dd5c071461038c578063c320c727146103ac578063f2fde38b146103cc57610135565b80635590d575146102ad578063715018a6146102cd578063798534c3146102e2578063824c1db51461030257806387c9fdec1461031557610135565b80631aa3a008116100fd5780631aa3a008146102015780631ca931c61461020b5780631ce30181146102385780632d618a1a1461024d5780632e8199cb1461026d5780634c68f4a21461028d57610135565b806301ffc9a71461013a57806311a5e4091461017057806314c44e09146101925780631626ba7e146101b457806317932f45146101d4575b600080fd5b34801561014657600080fd5b5061015a61015536600461203b565b6103ec565b604051610167919061208f565b60405180910390f35b34801561017c57600080fd5b5061018561040f565b604051610167919061212a565b34801561019e57600080fd5b506101a761041a565b6040516101679190612251565b3480156101c057600080fd5b506101856101cf366004611ff6565b610421565b3480156101e057600080fd5b506101f46101ef366004611d8c565b610483565b604051610167919061225a565b6102096104ae565b005b34801561021757600080fd5b5061022b610226366004611d8c565b61054f565b60405161016791906121ff565b34801561024457600080fd5b506101856105cd565b34801561025957600080fd5b5061022b610268366004611ddf565b6105d2565b34801561027957600080fd5b506101f4610288366004611e21565b610666565b34801561029957600080fd5b506102096102a8366004611e74565b610859565b3480156102b957600080fd5b506102096102c8366004611e9d565b61091c565b3480156102d957600080fd5b50610209610bb7565b3480156102ee57600080fd5b506102096102fd366004611fbd565b610c25565b610209610310366004611dad565b610d7d565b34801561032157600080fd5b50610209610330366004611f94565b610ec6565b34801561034157600080fd5b5061034a610f96565b604051610167919061207b565b34801561036357600080fd5b50610185610fa5565b34801561037857600080fd5b5061015a610387366004611d8c565b610fb0565b34801561039857600080fd5b5061015a6103a7366004611d8c565b610fc6565b3480156103b857600080fd5b506102096103c7366004612063565b610fdc565b3480156103d857600080fd5b506102096103e7366004611d8c565b61107f565b6001600160e01b0319811660009081526065602052604090205460ff165b919050565b63fb855dc960e01b81565b6101315481565b60008082516041141561046f576104388484611132565b6001600160a01b038116600090815261012f602052604090205490915060ff161561046f5761046760016111b2565b91505061047d565b61047960006111b2565b9150505b92915050565b6001600160a01b0316600090815261012f60205260409020546201000090046001600160601b031690565b6101315434146104d95760405162461bcd60e51b81526004016104d090612167565b60405180910390fd5b600161013260006104e86111ce565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556105186111ce565b6001600160a01b03167f215b369bd48d11cf2511d7506b43ec3c526bafabab242b4f41420061ca6c047660405160405180910390a2565b610557611c1f565b506001600160a01b0316600090815261012f6020908152604091829020825160c081018452815460ff8082161515835261010082041693820193909352620100009092046001600160601b031692820192909252600182015460608201526002820154608082015260039091015460a082015290565b600081565b6105da611c1f565b506001600160a01b039283166000908152610130602090815260408083209486168352938152838220929094168152908352819020815160c081018352815460ff8082161515835261010082041694820194909452620100009093046001600160601b03169183019190915260018101546060830152600281015460808301526003015460a082015290565b6000836001600160a01b0316836001600160a01b0316141561068a57506000610851565b6001600160a01b0383166000908152610133602052604090205460ff16156106c45760405162461bcd60e51b81526004016104d0906121df565b6001600160a01b03808616600090815261013060209081526040808320888516845282528083209387168352929052205460ff16801561073e57506001600160a01b03858116600090815261013060209081526040808320888516845282528083209387168352929052205460ff83811661010090920416145b801561077d57506001600160a01b0380861660009081526101306020908152604080832088851684528252808320938716835292905220600201544210155b80156107bc57506001600160a01b0380861660009081526101306020908152604080832088851684528252808320938716835292905220600301544211155b1561080757506001600160a01b0384811660009081526101306020908152604080832087851684528252808320938616835292905220546201000090046001600160601b0316610851565b6001600160a01b038316600090815261012f602052604090205460ff16156108395761083283610483565b9050610851565b60405162461bcd60e51b81526004016104d0906121b8565b949350505050565b6108616111ce565b6001600160a01b0316610872610f96565b6001600160a01b0316146108bb576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b6001600160a01b0382166000818152610133602052604090819020805460ff1916841515179055517fbe490a041de95d684835a21f3975102b719d9ede8cf410d4b6b06440bf8395099061091090849061208f565b60405180910390a25050565b80516001600160a01b03166000908152610132602052604090205460ff166109565760405162461bcd60e51b81526004016104d09061213f565b80516001600160a01b03166000908152610133602052604090205460ff16156109915760405162461bcd60e51b81526004016104d0906121df565b600061099c826111d2565b90506109c68260000151828461010001516000815181106109b957fe5b6020026020010151611255565b506109e28260200151828461010001516001815181106109b957fe5b506040518060c00160405280600115158152602001836060015160ff16815260200183608001516001600160601b031681526020018360a0015181526020018360c0015181526020018360e001518152506101306000856001600160a01b03166001600160a01b03168152602001908152602001600020600084602001516001600160a01b03166001600160a01b03168152602001908152602001600020600084600001516001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a8154816001600160601b0302191690836001600160601b03160217905550606082015181600101556080820151816002015560a0820151816003015590505081600001516001600160a01b031682602001516001600160a01b0316846001600160a01b03167f69cb66faf16ca2e31361c69ac05e6d87e1e654c176ed28d8fc8c0ae1ab626e6f6001866060015187608001518860a001518960c001518a60e00151604051610baa9695949392919061209a565b60405180910390a4505050565b610bbf6111ce565b6001600160a01b0316610bd0610f96565b6001600160a01b031614610c19576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b610c236000611262565b565b610c2d6111ce565b6001600160a01b0316610c3e610f96565b6001600160a01b031614610c87576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b6040805160c0810182528215158152600060208083018281526001600160601b03878116858701908152606086018581526080870186815260a088018781526001600160a01b038d1680895261012f90975296899020975188549551935160ff199096169015151761ff00191661010060ff90941693909302929092176dffffffffffffffffffffffff0000191662010000949093169390930291909117855590516001850155516002840155905160039092019190915590517f3ba4459a210a6138b265a58dfb23e34b1401574b8680e83038035fcf97794f7d90610d70908590859061226e565b60405180910390a2505050565b6001600160a01b03821660009081526101306020526040812090610d9f6111ce565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020600101543414610dea5760405162461bcd60e51b81526004016104d090612191565b6001600160a01b03821660009081526101306020526040812090610e0c6111ce565b6001600160a01b039081168252602080830193909352604091820160009081209185168082529190935290822080546dffffffffffffffffffffffffffff19168155600181018390556002810183905560030191909155610e6b6111ce565b6001600160a01b0316836001600160a01b03167f69cb66faf16ca2e31361c69ac05e6d87e1e654c176ed28d8fc8c0ae1ab626e6f600080600080600080604051610eba9695949392919061209a565b60405180910390a45050565b600054610100900460ff1680610edf5750610edf6112be565b80610eed575060005460ff16155b610f285760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff16158015610f53576000805460ff1961ff0019909116610100171660011790555b610f5b6112cf565b610f63611380565b610f7363fb855dc960e01b611419565b610f7f83836001610c25565b8015610f91576000805461ff00191690555b505050565b6033546001600160a01b031690565b630b135d3f60e11b81565b6101336020526000908152604090205460ff1681565b6101326020526000908152604090205460ff1681565b610fe46111ce565b6001600160a01b0316610ff5610f96565b6001600160a01b03161461103e576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b6101318190556040517fa2189166d5c911346d5bb991741077435b23bcc6e38b0b7044fd044039889c4890611074908390612251565b60405180910390a150565b6110876111ce565b6001600160a01b0316611098610f96565b6001600160a01b0316146110e1576040805162461bcd60e51b81526020600482018190526024820152600080516020612346833981519152604482015290519081900360640190fd5b6001600160a01b0381166111265760405162461bcd60e51b81526004018080602001828103825260268152602001806122ae6026913960400191505060405180910390fd5b61112f81611262565b50565b6000815160411461118a576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6111a88682858561149d565b9695505050505050565b6000816111c057600061047d565b630b135d3f60e11b92915050565b3390565b6000807f391c691d2a8ef2b2d263e148d4913ef75de23118a7913be520d2a57d0e155aff836000015184602001518560400151866060015187608001518860a001518960c001518a60e00151604051602001611236999897969594939291906120d0565b60408051808303601f1901815291905280516020909101209392505050565b60006108518484846116f3565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60006112c930611973565b15905090565b600054610100900460ff16806112e857506112e86112be565b806112f6575060005460ff16155b6113315760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff1615801561135c576000805460ff1961ff0019909116610100171660011790555b611364611979565b61136c611a19565b801561112f576000805461ff001916905550565b600054610100900460ff168061139957506113996112be565b806113a7575060005460ff16155b6113e25760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff1615801561140d576000805460ff1961ff0019909116610100171660011790555b61136c6301ffc9a760e01b5b6001600160e01b03198082161415611478576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152606560205260409020805460ff19166001179055565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156114fe5760405162461bcd60e51b81526004018080602001828103825260228152602001806122d46022913960400191505060405180910390fd5b6000601e8560ff1611156115d8576004850360ff16601b148061152757506004850360ff16601c145b6115625760405162461bcd60e51b81526004018080602001828103825260228152602001806123246022913960400191505060405180910390fd5b600161156d87611ad0565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156115c7573d6000803e3d6000fd5b50505060206040510351905061168f565b8460ff16601b14806115ed57508460ff16601c145b6116285760405162461bcd60e51b81526004018080602001828103825260228152602001806123246022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611682573d6000803e3d6000fd5b5050506020604051035190505b6001600160a01b0381166116ea576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b6000806116ff84611b21565b9050600083516041141561171a576117178285611132565b90505b856001600160a01b0316816001600160a01b0316146116ea57611745866001600160a01b0316611973565b156118fb5760408051630b135d3f60e11b808252600482018581526024830193845287516044840152875191936001600160a01b038b1693631626ba7e9388938b9390929091606490910190602085019080838360005b838110156117b457818101518382015260200161179c565b50505050905090810190601f1680156117e15780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156117ff57600080fd5b505afa158015611813573d6000803e3d6000fd5b505050506040513d602081101561182957600080fd5b505160408051808201909152601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020820152916001600160e01b0319909116146118f55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118ba5781810151838201526020016118a2565b50505050905090810190601f1680156118e75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506116ea565b604080518082018252601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020808301918252925162461bcd60e51b815260048101938452825160248201528251929392839260449092019190808383600083156118ba5781810151838201526020016118a2565b3b151590565b600054610100900460ff168061199257506119926112be565b806119a0575060005460ff16155b6119db5760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff1615801561136c576000805460ff1961ff001990911661010017166001179055801561112f576000805461ff001916905550565b600054610100900460ff1680611a325750611a326112be565b80611a40575060005460ff16155b611a7b5760405162461bcd60e51b815260040180806020018281038252602e8152602001806122f6602e913960400191505060405180910390fd5b600054610100900460ff16158015611aa6576000805460ff1961ff0019909116610100171660011790555b6000611ab06111ce565b9050611abb81611262565b50801561112f576000805461ff001916905550565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000611b2b611b6d565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6000611ba87f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611b9b611bad565b611ba3611bb3565b611bb9565b905090565b60975490565b60985490565b6000838383611bc6611c1b565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b4690565b6040518060c00160405280600015158152602001600060ff16815260200160006001600160601b031681526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461040a57600080fd5b600082601f830112611c8a578081fd5b8135602067ffffffffffffffff821115611ca057fe5b611cad8182840201612289565b82815281810190858301855b85811015611ce257611cd0898684358b0101611cff565b84529284019290840190600101611cb9565b5090979650505050505050565b8035801515811461040a57600080fd5b600082601f830112611d0f578081fd5b813567ffffffffffffffff811115611d2357fe5b611d36601f8201601f1916602001612289565b818152846020838601011115611d4a578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461040a57600080fd5b80356001600160601b038116811461040a57600080fd5b600060208284031215611d9d578081fd5b611da682611c63565b9392505050565b60008060408385031215611dbf578081fd5b611dc883611c63565b9150611dd660208401611c63565b90509250929050565b600080600060608486031215611df3578081fd5b611dfc84611c63565b9250611e0a60208501611c63565b9150611e1860408501611c63565b90509250925092565b60008060008060808587031215611e36578081fd5b611e3f85611c63565b9350611e4d60208601611c63565b9250611e5b60408601611c63565b9150611e6960608601611d64565b905092959194509250565b60008060408385031215611e86578182fd5b611e8f83611c63565b9150611dd660208401611cef565b60008060408385031215611eaf578182fd5b611eb883611c63565b9150602083013567ffffffffffffffff80821115611ed4578283fd5b8185019150610120808388031215611eea578384fd5b611ef381612289565b9050611efe83611c63565b8152611f0c60208401611c63565b6020820152611f1d60408401611c63565b6040820152611f2e60608401611d64565b6060820152611f3f60808401611d75565b608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013583811115611f75578586fd5b611f8189828701611c7a565b8284015250508093505050509250929050565b60008060408385031215611fa6578182fd5b611faf83611c63565b9150611dd660208401611d75565b600080600060608486031215611fd1578283fd5b611fda84611c63565b9250611fe860208501611d75565b9150611e1860408501611cef565b60008060408385031215612008578182fd5b82359150602083013567ffffffffffffffff811115612025578182fd5b61203185828601611cff565b9150509250929050565b60006020828403121561204c578081fd5b81356001600160e01b031981168114611da6578182fd5b600060208284031215612074578081fd5b5035919050565b6001600160a01b0391909116815260200190565b901515815260200190565b951515865260ff9490941660208601526001600160601b039290921660408501526060840152608083015260a082015260c00190565b9889526001600160a01b0397881660208a0152958716604089015293909516606087015260ff9190911660808601526001600160601b031660a085015260c084019290925260e08301919091526101008201526101200190565b6001600160e01b031991909116815260200190565b6020808252600e908201526d139bdd081c9959da5cdd195c995960921b604082015260600190565b60208082526010908201526f526567697374726174696f6e2066656560801b604082015260600190565b6020808252600d908201526c43616e63656c2063686172676560981b604082015260600190565b6020808252600d908201526c27379030bab1ba34b7b732b2b960991b604082015260600190565b60208082526006908201526510985b9b995960d21b604082015260600190565b600060c08201905082511515825260ff60208401511660208301526001600160601b036040840151166040830152606083015160608301526080830151608083015260a083015160a083015292915050565b90815260200190565b6001600160601b0391909116815260200190565b6001600160601b039290921682521515602082015260400190565b60405181810167ffffffffffffffff811182821017156122a557fe5b60405291905056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c7565496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c75654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122058c6a0ee0f89f8b88bd8565b9b2754375fb7a5620b1466ad58a11d2eb02fd1ba64736f6c63430007060033","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"auctioneer","type":"address"},{"indexed":false,"internalType":"bool","name":"isBanned","type":"bool"}],"name":"Banned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"ChangeRegistrationFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"auctioneer","type":"address"},{"indexed":false,"internalType":"uint96","name":"fee","type":"uint96"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"DefaultAuctioneer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"auctioneer","type":"address"}],"name":"RegisteredAuctioneer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"minter","type":"address"},{"indexed":true,"internalType":"address","name":"auctioneer","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"},{"indexed":false,"internalType":"uint8","name":"auctionType","type":"uint8"},{"indexed":false,"internalType":"uint96","name":"fee","type":"uint96"},{"indexed":false,"internalType":"uint256","name":"cancelValue","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"start","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"end","type":"uint256"}],"name":"UpsertAuctioneer","type":"event"},{"inputs":[],"name":"ERC1271_INTERFACE_ID","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ERC1271_RETURN_INVALID_SIGNATURE","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ERC1271_RETURN_VALID_SIGNATURE","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_auctioneer","type":"address"},{"internalType":"uint96","name":"_fee","type":"uint96"}],"name":"__AuctioneerUpgradable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_auctioneer","type":"address"},{"internalType":"bool","name":"_isBanned","type":"bool"}],"name":"ban","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"banned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_auctioneer","type":"address"}],"name":"cancel","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_minter","type":"address"},{"internalType":"address","name":"_auctioneer","type":"address"}],"name":"get","outputs":[{"components":[{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint8","name":"auctionType","type":"uint8"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"uint256","name":"cancelValue","type":"uint256"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"}],"internalType":"struct AuctioneerUpgradable.Auctioneer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_auctioneer","type":"address"}],"name":"getDefault","outputs":[{"components":[{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint8","name":"auctionType","type":"uint8"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"uint256","name":"cancelValue","type":"uint256"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"}],"internalType":"struct AuctioneerUpgradable.Auctioneer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_auctioneer","type":"address"}],"name":"getDefaultFee","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_minter","type":"address"},{"internalType":"address","name":"_signer","type":"address"},{"internalType":"uint8","name":"_auctionType","type":"uint8"}],"name":"getFee","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"register","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"registered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registrationFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_registrationFee","type":"uint256"}],"name":"setRegistrationFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"components":[{"internalType":"address","name":"auctioneer","type":"address"},{"internalType":"address","name":"minter","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint8","name":"auctionType","type":"uint8"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"uint256","name":"cancelValue","type":"uint256"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"internalType":"struct LibAuctioneer.Auctioneer","name":"data","type":"tuple"}],"name":"upsert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_auctioneer","type":"address"},{"internalType":"uint96","name":"_fee","type":"uint96"},{"internalType":"bool","name":"active","type":"bool"}],"name":"upsertDefault","outputs":[],"stateMutability":"nonpayable","type":"function"}]}