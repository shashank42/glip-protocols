{"metadata":"{\"compiler\":{\"version\":\"0.7.5\"},\"sources\":{\"contracts/roles/MinterUpgradeable.sol\":{\"content\":\"\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"./../tokens/@rarible/libraries/contracts/LibSignature.sol\\\";\\nimport \\\"./../tokens/erc-1271/ERC1271.sol\\\";\\nimport \\\"./IMinterUpgradeable.sol\\\";\\nimport \\\"./LibMinter.sol\\\";\\nimport \\\"./RolesValidator.sol\\\";\\nimport \\\"../tokens/@rarible/royalties/contracts/LibPart.sol\\\";\\nimport \\\"./../tokens/SplitPayments.sol\\\";\\n\\ncontract MinterUpgradeable is ERC1271, OwnableUpgradeable, ERC165Upgradeable, IMinterUpgradeable, RolesValidator {\\n\\n    using LibSignature for bytes32;\\n    using AddressUpgradeable for address;\\n\\n    event UpsertDefaultMinter(address indexed minter, uint96 fee, bool active);\\n    event MinDefaultMinterRoyalty(uint96 fee);\\n    event UpsertDefaultPayouts(address indexed token, address indexed creator, LibPart.Part[] creators, bool byOwner);\\n    event UpsertDefaultRoyalties(address indexed token, address indexed creator, bytes32 royaltyBytes, bool byOwner);\\n    event NewSplitter(LibPart.Part[] payees, bytes32 splitterBytes, address indexed splitterAddress); // @todo find better word for depositBPS\\n    event RecievedRoyaltyPayment(address indexed from, uint256 amount);\\n    event WithdrawStakedRoyalty(address indexed splitter, address indexed by, uint256 amount, LibPart.Part[] splits);\\n    event UpsertMinter(address indexed token, address indexed creator, address indexed minter, bool active, uint96 fee, uint256 cancelValue);\\n\\n    struct Minter {\\n        bool active;\\n        uint96 fee;\\n        uint256 cancelValue;\\n        uint256 start;\\n        uint256 end;\\n        LibPart.Part[] creators;    // No need to create splitter for creator payouts\\n        bytes32 royalties;          // Creating a splitter to allow for EIP 2981\\n    }\\n\\n    struct DefaultMinter {\\n        bool active;\\n        uint96 fee;\\n        uint256 cancelValue;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    // Store the royalty stakes from the wallets\\n    mapping(address => uint256) public stake;\\n\\n    // Default minter\\n    // address private minter;\\n    // uint96 private fee;\\n    mapping(address => uint256) private defaults;\\n    // Creator approved minters\\n    mapping(address => mapping(address => mapping(address => uint256))) private minters;\\n\\n    // Minters registry\\n    DefaultMinter[] public defaultsRegistry;\\n    Minter[] public mintersRegistry;\\n\\n    // To map created payment splitters with their definition, used for custom minters\\n    address public splitterImplementationContract;\\n    mapping (bytes32 => LibPart.Part) public splitters;\\n\\n    // Maps splitter address to whom the staked amount should go to\\n    mapping (address => LibPart.Part[]) public withdrawSplits;\\n    // Overall percentage basis points excluding the minter contract\\n    mapping (address => uint96) public depositBPS;\\n\\n    // Mapping from creator to payment splitter for default royalties\\n    mapping (address => mapping(address => LibPart.Part[] )) public defaultPayoutMapping;\\n    mapping (address => mapping(address => bytes32)) public defaultRoyaltySplittersMapping;\\n\\n    // Minimum royalty for using the default signer\\n    uint96 public minDefaultMinterRoyalty;\\n\\n    function __MinterUpgradable_init (address _minter, uint96 _fee, uint96 _minDefaultMinterRoyalty, address _splitterImplementationContract ) public initializer {\\n        __Ownable_init();\\n        __ERC165_init_unchained();\\n        _registerInterface(ERC1271_INTERFACE_ID);\\n\\n        // Ensure index 0 is empty by default for cases where data is not set\\n        defaultsRegistry.push();\\n        mintersRegistry.push();\\n\\n        upsertDefaultMinter(_minter, _fee, true);\\n        setMinDefaultMinterRoyalty(_minDefaultMinterRoyalty);\\n        setSplitterImplementationContract(_splitterImplementationContract);\\n    }\\n\\n    function setSplitterImplementationContract(address _splitterImplementationContract) public onlyOwner {\\n        splitterImplementationContract = _splitterImplementationContract;\\n    }\\n    \\n    function setMinDefaultMinterRoyalty(uint96 _minDefaultMinterRoyalty) public onlyOwner {\\n        minDefaultMinterRoyalty = _minDefaultMinterRoyalty;\\n        emit MinDefaultMinterRoyalty(_minDefaultMinterRoyalty);\\n    }\\n\\n    function upsertDefaultMinter(address _minter, uint96 _fee, bool active ) public onlyOwner {\\n        defaults[_minter] = defaultsRegistry.length;\\n        defaultsRegistry.push(DefaultMinter(active, _fee, 0, 0, 0));\\n        emit UpsertDefaultMinter(_minter, _fee, active);\\n    }\\n\\n    function upsertDefaultCreatorPayoutsAndRoyalties(LibMinter.DefaultMinter memory data) public onlyOwner {\\n\\n        delete defaultPayoutMapping[data.token][data.creator];\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            defaultPayoutMapping[data.token][data.creator].push(data.creators[i]);\\n        }\\n        bytes32 royaltiesBytes = getOrCreateSplitterUsingSplit(data.royalties);\\n        defaultRoyaltySplittersMapping[data.token][data.creator] = royaltiesBytes;\\n\\n        emit UpsertDefaultPayouts(data.token, data.creator, data.creators, true);\\n        emit UpsertDefaultRoyalties(data.token, data.creator, royaltiesBytes, true);\\n\\n    }\\n\\n    function upsertDefaultCreatorPayoutsAndRoyaltiesByCreator(LibMinter.DefaultMinter memory data) public {\\n\\n        require(data.creator == _msgSender(), \\\"Can't set for someone else\\\");\\n        delete defaultPayoutMapping[data.token][data.creator];\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            defaultPayoutMapping[data.token][data.creator].push(data.creators[i]);\\n        }\\n\\n        // Ensure Minters contract gets a minimum specified royalty\\n        bool setDefault;\\n        for (uint i = 0; i < data.royalties.length; i++) {\\n            if (data.royalties[i].account == address(this)){\\n                if (data.royalties[i].value < minDefaultMinterRoyalty) {\\n                    data.royalties[i].value = minDefaultMinterRoyalty;\\n                }\\n                setDefault = true;\\n                break;\\n            }\\n        }\\n\\n        bytes32 royaltiesBytes;\\n        if (!setDefault){\\n            // Extend array in memory\\n            LibPart.Part[] memory royalties = new LibPart.Part[](data.royalties.length + 1);\\n            for (uint i = 0; i < data.royalties.length; i++) {\\n                royalties[i].account = data.royalties[i].account;\\n                royalties[i].value = data.royalties[i].value;\\n            }\\n            royalties[data.royalties.length].account = payable(address(this));\\n            royalties[data.royalties.length].value = minDefaultMinterRoyalty;\\n\\n            royaltiesBytes = getOrCreateSplitterUsingSplit(royalties);\\n            defaultRoyaltySplittersMapping[data.token][data.creator] = royaltiesBytes;\\n        } else {\\n            royaltiesBytes = getOrCreateSplitterUsingSplit(data.royalties);\\n            defaultRoyaltySplittersMapping[data.token][data.creator] = royaltiesBytes;\\n        }\\n\\n        emit UpsertDefaultPayouts(data.token, data.creator, data.creators, false);\\n        emit UpsertDefaultRoyalties(data.token, data.creator, royaltiesBytes, false);\\n    }\\n\\n    function getDefaultMinter(address _minter) external view returns (uint256 index, DefaultMinter memory) {\\n        return (defaults[_minter], defaultsRegistry[defaults[_minter]]);\\n    }\\n\\n    function getDefaultMinterFee(address _minter) public view returns (uint96) {\\n        return defaultsRegistry[defaults[_minter]].fee;\\n    }\\n\\n    function getOrCreateSplitterUsingSplit(LibPart.Part[] memory payees) internal virtual returns (bytes32){\\n\\n        address payable splitterAddress;\\n        uint96 totalValue;\\n        bytes32 splitterBytes = LibPart.hashParts(payees);\\n        if (payees.length == 1) {\\n            require(payees[0].account != address(0x0), \\\"Recipient should be present\\\");\\n            require(payees[0].value != 0, \\\"Royalty value should be positive\\\");\\n            require(payees[0].value < 10000, \\\"Royalty total value should be < 10000\\\");\\n\\n            splitters[splitterBytes] = LibPart.Part(payees[0].account, payees[0].value);\\n\\n        } else if ( payees.length > 0) {\\n            splitterAddress = splitters[splitterBytes].account;\\n            totalValue = splitters[splitterBytes].value;\\n            \\n            // Check if splitter is not already created\\n            if (splitterAddress == address(0x0)){\\n\\n                \\n                for (uint i = 0; i < payees.length; i++) {\\n                    require(payees[i].account != address(0x0), \\\"Recipient should be present\\\");\\n                    require(payees[i].value != 0, \\\"Royalty value should be positive\\\");\\n                    totalValue += payees[i].value;\\n                }\\n                require(totalValue < 10000, \\\"Royalty total value should be < 10000\\\");\\n\\n                uint96 _depositBPS;\\n                for (uint i = 0; i < payees.length; i++) {\\n                    payees[i].value = payees[i].value * 10000 / totalValue;\\n                    if (payees[i].account != address(this)){\\n                        _depositBPS += payees[i].value;\\n                    } else {\\n                        payees[i].value = 0;\\n                    }\\n                }\\n\\n                splitterAddress = payable(ClonesUpgradeable.clone(splitterImplementationContract));\\n                SplitPayments(splitterAddress).setMinterContract(address(this));\\n\\n                splitters[splitterBytes] = LibPart.Part(splitterAddress, totalValue);\\n                depositBPS[splitterAddress] = _depositBPS;\\n\\n                for (uint i = 0; i < payees.length; i++){\\n                    withdrawSplits[splitterAddress].push(payees[i]);\\n                }\\n\\n                emit NewSplitter(payees, splitterBytes, splitterAddress);\\n\\n            }\\n\\n            // return LibPart.Part(payable(splitter), totalValue);\\n        }\\n\\n        return splitterBytes;\\n    }\\n\\n    function recieveRoyaltyStake() external payable override {\\n        require(depositBPS[_msgSender()] > 0, \\\"Isn't a splitter address\\\");\\n        // Stake the royalty users into their staked wallet address to be withdrawn when they want\\n        // The minterDefault's stake is just added to the contract balance\\n        stake[_msgSender()] += msg.value * depositBPS[_msgSender()] / 10000 ;\\n        stake[owner()] += msg.value * (10000 - depositBPS[_msgSender()]) / 10000 ;\\n        emit RecievedRoyaltyPayment(_msgSender(), msg.value);\\n    }\\n\\n    function withdrawOwnerStake() external onlyOwner {\\n        (bool success, ) = owner().call{value: stake[owner()]}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    function withdrawRoyaltyStake(bytes32 splitterBytes) external {\\n        address splitterAddress = splitters[splitterBytes].account;\\n        // Send the staked amounts to participants wallets\\n        for (uint i = 0; i < withdrawSplits[splitterAddress].length; i++) {\\n            if (withdrawSplits[splitterAddress][i].account != address(this)) {\\n                (bool success, ) = withdrawSplits[splitterAddress][i].account.call{\\n                value:(stake[splitterAddress] * withdrawSplits[splitterAddress][i].value ) / depositBPS[splitterAddress]\\n                }(\\\"\\\");\\n                // require(success, \\\"Transfer failed.\\\"); // If someone messed up, others shouldn't suffer\\n            }\\n        }\\n        emit WithdrawStakedRoyalty(splitterAddress, _msgSender(), stake[splitterAddress], withdrawSplits[splitterAddress]);\\n        delete stake[splitterAddress];\\n    }\\n\\n    function upsertMinter(address _token, LibMinter.Minter memory data) public virtual {\\n\\n        bytes32 hash = LibMinter.hash(data);\\n\\n        // Check if creator and minter gave signature\\n        address signer = validate(data.minter, hash, data.signatures[0]);\\n        validate(data.creator, hash, data.signatures[1]);\\n\\n        // Creator is free to choose royalty split\\n        bytes32 royalties = getOrCreateSplitterUsingSplit(data.royalties);\\n        minters[_token][data.creator][data.minter] = mintersRegistry.length;\\n\\n        \\n        mintersRegistry.push();\\n\\n        mintersRegistry[mintersRegistry.length - 1].active = true;\\n        mintersRegistry[mintersRegistry.length - 1].fee = data.fee;\\n        mintersRegistry[mintersRegistry.length - 1].cancelValue = data.cancelValue;\\n        mintersRegistry[mintersRegistry.length - 1].start = data.start;\\n        mintersRegistry[mintersRegistry.length - 1].end = data.end;\\n        mintersRegistry[mintersRegistry.length - 1].royalties = royalties;\\n\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            mintersRegistry[mintersRegistry.length - 1].creators.push(data.creators[i]);\\n        }\\n\\n        emit UpsertMinter(_token, data.creator, data.minter, true, data.fee, data.cancelValue);\\n\\n    }\\n\\n    function cancelMinter(address _token, address _minter) public payable virtual {\\n        require(\\n            msg.value == mintersRegistry[minters[_token][_msgSender()][_minter]].cancelValue,\\n            \\\"Cancel charge\\\"\\n        );\\n        delete mintersRegistry[minters[_token][_msgSender()][_minter]].active;\\n        emit UpsertMinter(_token, _msgSender(), _minter, false, 0, 0);\\n    }\\n\\n    function getMinter(address _token, address _creator, address _minter)\\n        public\\n        view\\n        virtual\\n        returns (Minter memory)\\n    {\\n        return mintersRegistry[minters[_token][_creator][_minter]];\\n    }\\n\\n\\n    function getDetailsForMinting(address _token, address _creator, address _signer) external view virtual override returns (\\n        uint96,                 // Minting fee\\n        LibPart.Part[] memory,  // Creators payouts\\n        bytes32,                // Royalty splitter contract bytes to save\\n        LibPart.Part memory     // Royalty splitter contract address and percentage basis points\\n    ){\\n       \\n        if (_signer == _creator){\\n            // Allowing self signed\\n            if (defaultPayoutMapping[_token][_creator].length == 0){\\n                LibPart.Part[] memory creators = new LibPart.Part[](1);\\n                creators[0].account = payable(_creator);\\n                creators[0].value  = 10000;\\n\\n                return (0, \\n                        creators, \\n                        defaultRoyaltySplittersMapping[_token][_creator], \\n                        splitters[defaultRoyaltySplittersMapping[_token][_creator]]);\\n            }\\n\\n            return (0, \\n                    defaultPayoutMapping[_token][_creator], \\n                    defaultRoyaltySplittersMapping[_token][_creator], \\n                    splitters[defaultRoyaltySplittersMapping[_token][_creator]]);\\n\\n        } else if (mintersRegistry[minters[_token][_creator][_signer]].active) {\\n            \\n            // Signed by creator defined minter\\n            return (mintersRegistry[minters[_token][_creator][_signer]].fee, \\n                    mintersRegistry[minters[_token][_creator][_signer]].creators, \\n                    mintersRegistry[minters[_token][_creator][_signer]].royalties, \\n                    splitters[mintersRegistry[minters[_token][_creator][_signer]].royalties]);\\n\\n        } else if (defaultsRegistry[defaults[_signer]].active) {\\n\\n            // Signed by any of the default minters\\n            if (defaultPayoutMapping[_token][_creator].length == 0){\\n                LibPart.Part[] memory creators = new LibPart.Part[](1);\\n                creators[0].account = payable(_creator);\\n                creators[0].value  = 10000;\\n\\n                return (defaultsRegistry[defaults[_signer]].fee, \\n                        creators, \\n                        defaultRoyaltySplittersMapping[_token][_creator], \\n                        splitters[defaultRoyaltySplittersMapping[_token][_creator]]);\\n            } \\n\\n            return (defaultsRegistry[defaults[_signer]].fee, \\n                    defaultPayoutMapping[_token][_creator], \\n                    defaultRoyaltySplittersMapping[_token][_creator], \\n                    splitters[defaultRoyaltySplittersMapping[_token][_creator]]);\\n        }\\n        revert(\\\"Illegal minter\\\");\\n    }\\n\\n\\n    function getDetailsForRoyalty(address _token, address _creator, address _signer) external view virtual override returns (\\n        bytes32 // Splitter description bytes identifier for the wallet\\n    ){\\n        if (_signer == _creator){\\n            return defaultRoyaltySplittersMapping[_token][_creator];\\n        } else if (mintersRegistry[minters[_token][_creator][_signer]].active) {\\n            return mintersRegistry[minters[_token][_creator][_signer]].royalties;\\n        } else if (defaultsRegistry[defaults[_signer]].active) {\\n            return defaultRoyaltySplittersMapping[_token][_creator];\\n        }\\n        revert(\\\"Illegal minter\\\");\\n    }\\n\\n    function getSplitter(bytes32 splitterBytes) external view override returns(LibPart.Part memory) {\\n        return splitters[splitterBytes];\\n    }\\n\\n    \\n\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public virtual override view returns (bytes4){\\n\\n        address signerFromSig;\\n        if (_signature.length == 65) {\\n            signerFromSig = _hash.recover(_signature);\\n            if (defaultsRegistry[defaults[signerFromSig]].active) {\\n                return returnIsValidSignatureMagicNumber(true);\\n            }\\n        }\\n        return returnIsValidSignatureMagicNumber(false);\\n\\n    }\\n\\n\\n    uint256[50] private __gap;\\n\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _setOwnership(msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwnership(address(0));\\n    }\\n\\n    function _setOwnership(address newOwner) internal virtual {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwnership(newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/tokens/@rarible/libraries/contracts/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\"},\"contracts/tokens/erc-1271/ERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nabstract contract ERC1271 {\\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\\n\\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x1626ba7e;\\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public virtual view returns (bytes4);\\n\\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\\n    }\\n}\"},\"contracts/tokens/@rarible/royalties/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n    bytes32 public constant ARRAY_TYPE_HASH = keccak256(\\\"Parts(Part[] parts)Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n    \\n    function hashParts(Part[] memory parts) internal pure returns (bytes32) {\\n        bytes32[] memory partsBytes = new bytes32[](parts.length);\\n        for (uint256 i = 0; i < parts.length; i++) {\\n            partsBytes[i] = LibPart.hash(parts[i]);\\n        }\\n        return keccak256(abi.encode(ARRAY_TYPE_HASH, keccak256(abi.encodePacked(partsBytes))));\\n    }\\n\\n}\\n\"},\"contracts/roles/IMinterUpgradeable.sol\":{\"content\":\"\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../tokens/@rarible/royalties/contracts/LibPart.sol\\\";\\n\\ninterface IMinterUpgradeable {\\n\\n    function getDetailsForMinting(address _token, address _creator, address _signer) external view returns (\\n        uint96,\\n        LibPart.Part[] memory,\\n        bytes32,\\n        LibPart.Part memory);\\n\\n    function getDetailsForRoyalty(address _token, address _creator, address _signer) external view returns (\\n        bytes32\\n    );\\n\\n    function getSplitter(bytes32 signature) external view returns(LibPart.Part memory);\\n\\n    function recieveRoyaltyStake() external payable;\\n}\\n\"},\"contracts/roles/LibMinter.sol\":{\"content\":\"pragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\n\\nimport \\\"../tokens/@rarible/royalties/contracts/LibPart.sol\\\";\\n\\n// https://medium.com/coinmonks/eip712-a-full-stack-example-e12185b03d54\\nlibrary LibMinter {\\n\\n    bytes32 constant MINTER_FEE_TYPEHASH = keccak256(\\n        \\\"Minter(address minter,address creator,address token,uint96 fee,uint256 cancelValue,uint256 start,uint256 end,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\"\\n    );\\n\\n    struct Minter {\\n        address minter;\\n        address creator;\\n        address token;\\n        uint96 fee;\\n        uint256 cancelValue;\\n        uint start;\\n        uint end;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    struct DefaultMinter {\\n        address creator;\\n        address token;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n    }\\n\\n    function hash(Minter memory minter) internal pure returns (bytes32) {\\n\\n        bytes32[] memory royaltiesBytes = new bytes32[](minter.royalties.length);\\n        for (uint256 i = 0; i < minter.royalties.length; i++) {\\n            royaltiesBytes[i] = LibPart.hash(minter.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](minter.creators.length);\\n        for (uint256 i = 0; i < minter.creators.length; i++) {\\n            creatorsBytes[i] = LibPart.hash(minter.creators[i]);\\n        }\\n\\n        bytes32 hashStruct = keccak256(abi.encode(\\n            MINTER_FEE_TYPEHASH,\\n            minter.minter,\\n            minter.creator,\\n            minter.token,\\n            minter.fee,\\n            minter.cancelValue,\\n            minter.start,\\n            minter.end,\\n            keccak256(abi.encodePacked(creatorsBytes)),\\n            keccak256(abi.encodePacked(royaltiesBytes))\\n        ));\\n\\n        return hashStruct;\\n    }\\n\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/erc-1271/ERC1271Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC1271.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\nimport \\\"./../@rarible/libraries/contracts/LibSignature.sol\\\";\\n\\nabstract contract ERC1271Validator is EIP712Upgradeable {\\n    using AddressUpgradeable for address;\\n    using LibSignature for bytes32;\\n\\n    string constant SIGNATURE_ERROR = \\\"signature verification error\\\";\\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function validate1271(address signer, bytes32 structHash, bytes memory signature) internal view returns (address) {\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signerFromSig;\\n        if (signature.length == 65) {\\n            signerFromSig = hash.recover(signature);\\n        }\\n        if  (signerFromSig != signer) {\\n            if (signer.isContract()) {\\n                require(\\n                    ERC1271(signer).isValidSignature(hash, signature) == MAGICVALUE,\\n                    SIGNATURE_ERROR\\n                );\\n            } else {\\n                revert(SIGNATURE_ERROR);\\n            }\\n        }\\n\\n        return signerFromSig;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/roles/RolesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./../tokens/erc-1271/ERC1271Validator.sol\\\";\\n\\ncontract RolesValidator is ERC1271Validator {\\n    function __RolesValidator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Roles\\\", \\\"1\\\");\\n    }\\n\\n    function validate(address account, bytes32 hash, bytes memory signature) internal view returns(address) {\\n        return validate1271(account, hash, signature);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/IMinterUpgradeableFPaymentSplitter.sol\":{\"content\":\"pragma solidity ^0.7.6;\\n\\ninterface IMinterUpgradeableFPaymentSplitter {\\n    function recieveRoyaltyStake() external payable;\\n}\\n\"},\"contracts/tokens/SplitPayments.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\nimport \\\"./IMinterUpgradeableFPaymentSplitter.sol\\\";\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\ncontract SplitPayments is Initializable {\\n\\n    IMinterUpgradeableFPaymentSplitter minter;\\n\\n    constructor() public {\\n    }\\n\\n    function setMinterContract(address minterAddress) external initializer {\\n        minter = IMinterUpgradeableFPaymentSplitter(minterAddress);\\n    }\\n\\n    receive() external payable {\\n        minter.recieveRoyaltyStake{value: address(this).balance}();\\n    }\\n    fallback() external payable {\\n        minter.recieveRoyaltyStake{value: address(this).balance}();\\n    }\\n}\\n\"}}}","address":"0xBdf14186BB7C7F2977226b3fc9058433C511dfF5","bytecode":"","deployedBytecode":"","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint96","name":"fee","type":"uint96"}],"name":"MinDefaultMinterRoyalty","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"indexed":false,"internalType":"struct LibPart.Part[]","name":"payees","type":"tuple[]"},{"indexed":false,"internalType":"bytes32","name":"splitterBytes","type":"bytes32"},{"indexed":true,"internalType":"address","name":"splitterAddress","type":"address"}],"name":"NewSplitter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RecievedRoyaltyPayment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"minter","type":"address"},{"indexed":false,"internalType":"uint96","name":"fee","type":"uint96"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"UpsertDefaultMinter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"indexed":false,"internalType":"struct LibPart.Part[]","name":"creators","type":"tuple[]"},{"indexed":false,"internalType":"bool","name":"byOwner","type":"bool"}],"name":"UpsertDefaultPayouts","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"bytes32","name":"royaltyBytes","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"byOwner","type":"bool"}],"name":"UpsertDefaultRoyalties","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"indexed":true,"internalType":"address","name":"minter","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"},{"indexed":false,"internalType":"uint96","name":"fee","type":"uint96"},{"indexed":false,"internalType":"uint256","name":"cancelValue","type":"uint256"}],"name":"UpsertMinter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"splitter","type":"address"},{"indexed":true,"internalType":"address","name":"by","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"indexed":false,"internalType":"struct LibPart.Part[]","name":"splits","type":"tuple[]"}],"name":"WithdrawStakedRoyalty","type":"event"},{"inputs":[],"name":"ERC1271_INTERFACE_ID","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ERC1271_RETURN_INVALID_SIGNATURE","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ERC1271_RETURN_VALID_SIGNATURE","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_minter","type":"address"},{"internalType":"uint96","name":"_fee","type":"uint96"},{"internalType":"uint96","name":"_minDefaultMinterRoyalty","type":"uint96"},{"internalType":"address","name":"_splitterImplementationContract","type":"address"}],"name":"__MinterUpgradable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_minter","type":"address"}],"name":"cancelMinter","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"defaultPayoutMapping","outputs":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"defaultRoyaltySplittersMapping","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"defaultsRegistry","outputs":[{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"uint256","name":"cancelValue","type":"uint256"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"depositBPS","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_minter","type":"address"}],"name":"getDefaultMinter","outputs":[{"internalType":"uint256","name":"index","type":"uint256"},{"components":[{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"uint256","name":"cancelValue","type":"uint256"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"}],"internalType":"struct MinterUpgradeable.DefaultMinter","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_minter","type":"address"}],"name":"getDefaultMinterFee","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"address","name":"_signer","type":"address"}],"name":"getDetailsForMinting","outputs":[{"internalType":"uint96","name":"","type":"uint96"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"","type":"tuple[]"},{"internalType":"bytes32","name":"","type":"bytes32"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"address","name":"_signer","type":"address"}],"name":"getDetailsForRoyalty","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"address","name":"_minter","type":"address"}],"name":"getMinter","outputs":[{"components":[{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"uint256","name":"cancelValue","type":"uint256"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"creators","type":"tuple[]"},{"internalType":"bytes32","name":"royalties","type":"bytes32"}],"internalType":"struct MinterUpgradeable.Minter","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"splitterBytes","type":"bytes32"}],"name":"getSplitter","outputs":[{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minDefaultMinterRoyalty","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"mintersRegistry","outputs":[{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"uint256","name":"cancelValue","type":"uint256"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"},{"internalType":"bytes32","name":"royalties","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recieveRoyaltyStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint96","name":"_minDefaultMinterRoyalty","type":"uint96"}],"name":"setMinDefaultMinterRoyalty","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_splitterImplementationContract","type":"address"}],"name":"setSplitterImplementationContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"splitterImplementationContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"splitters","outputs":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"stake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"address","name":"token","type":"address"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"creators","type":"tuple[]"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"royalties","type":"tuple[]"}],"internalType":"struct LibMinter.DefaultMinter","name":"data","type":"tuple"}],"name":"upsertDefaultCreatorPayoutsAndRoyalties","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"address","name":"token","type":"address"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"creators","type":"tuple[]"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"royalties","type":"tuple[]"}],"internalType":"struct LibMinter.DefaultMinter","name":"data","type":"tuple"}],"name":"upsertDefaultCreatorPayoutsAndRoyaltiesByCreator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_minter","type":"address"},{"internalType":"uint96","name":"_fee","type":"uint96"},{"internalType":"bool","name":"active","type":"bool"}],"name":"upsertDefaultMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"components":[{"internalType":"address","name":"minter","type":"address"},{"internalType":"address","name":"creator","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint96","name":"fee","type":"uint96"},{"internalType":"uint256","name":"cancelValue","type":"uint256"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"creators","type":"tuple[]"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"royalties","type":"tuple[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"internalType":"struct LibMinter.Minter","name":"data","type":"tuple"}],"name":"upsertMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawOwnerStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"splitterBytes","type":"bytes32"}],"name":"withdrawRoyaltyStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdrawSplits","outputs":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"stateMutability":"view","type":"function"}]}