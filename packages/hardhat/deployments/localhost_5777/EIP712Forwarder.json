{"metadata":"{\"compiler\":{\"version\":\"0.7.5\"},\"sources\":{\"contracts/meta-tx/EIP712Forwarder.sol\":{\"content\":\"/* EIP-2585 Minimal Native Meta Transaction Forwarder\\n * This standard defines a universal native meta transaction smart contract\\n * that accept specially crafted Externally Owned Accounts (EOA) signed message\\n * to forward to receiver contract via third parties.\\n *\\n * Written in 2020 by Ronan Sandford\\n *\\n * To the extent possible under law, the author(s) have dedicated all copyright\\n * and related and neighboring rights to this software to the public domain\\n * worldwide. This software is distributed without any warranty.\\n *\\n * You should have received a copy of the CC0 Public Domain Dedication along\\n * with this software. If not, see\\n * <https://creativecommons.org/publicdomain/zero/1.0/>.\\n *    \\n *       .-''-.  .-./`) .-------.               .`````-.  ,--------.     .-''''-.  ,--------.   \\n *     .'_ _   \\\\ \\\\ .-.')\\\\  _(`)_ \\\\             /   ,-.  \\\\ |   _____|    /  _--.  \\\\ |   _____|   \\n *    / ( ` )   '/ `-' \\\\| (_ o._)|            (___/  |   ||  )          |_( )_ ' | |  )         \\n *   . (_ o _)  | `-'`\\\"`|  (_,_) /_ _    _ _        .'  / |  '----.     (_ o _). / |  '----.    \\n *   |  (_,_)___| .---. |   '-.-'( ' )--( ' )   _.-'_.-'  |_.._ _  '.  .'(_,_).  `.|_.._ _  '.  \\n *   '  \\\\   .---. |   | |   |   (_{;}_)(_{;}_)_/_  .'        ( ' )   \\\\|_( )_    \\\\  |  ( ' )   \\\\ \\n *    \\\\  `-'    / |   | |   |    (_,_)--(_,_)( ' )(__..--. _(_{;}_)  |(_ o _)   /  |_(_{;}_)  | \\n *     \\\\       /  |   | /   )               (_{;}_)      ||  (_,_)  /  (_,_)..-' .'|  (_,_)  /  \\n *      `'-..-'   '---' `---'                (_,_)-------' `...__..'     `-....-'   `...__..'   \\n *                                                                                           \\n */\\n // SPDX-License-Identifier: MIT\\n // https://github.com/wighawag/eip-2585/blob/c9769ad0b4260b4f08f981527bb1162ecce570d3/contracts/src/Test/NumberSale.sol\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface ERC1271 {\\n    function isValidSignature(bytes calldata data, bytes calldata signature) external view returns (bytes4 magicValue);\\n}\\n\\ninterface ERC1654 {\\n   function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\\n}\\n\\ninterface ReplayProtection {\\n    function checkAndUpdateNonce(address signer, bytes calldata nonce) external returns (bool);\\n}\\n\\ninterface Forwarder {\\n\\n    enum SignatureType { DIRECT, EIP1654, EIP1271 }\\n\\n    struct Message {\\n        address from;\\n        address to;\\n        uint256 chainId;\\n        address replayProtection;\\n        bytes nonce;\\n        bytes data;\\n        bytes32 innerMessageHash;\\n\\t}\\n\\n    function forward(\\n        Message calldata message,\\n        SignatureType signatureType,\\n        bytes calldata signature\\n    ) external payable;\\n}\\n\\nlibrary SigUtil {\\n    function recover(bytes32 hash, bytes memory sig) internal pure returns (address recovered) {\\n        require(sig.length == 65, \\\"SIGNATURE_INVALID_LENGTH\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        require(v == 27 || v == 28, \\\"SIGNATURE_INVALID_V\\\");\\n\\n        recovered = ecrecover(hash, v, r, s);\\n        require(recovered != address(0), \\\"SIGNATURE_ZERO_ADDRESS\\\");\\n    }\\n\\n    function eth_sign_prefix(bytes32 hash) internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash);\\n    }\\n}\\n\\n/// @notice Forwarder for Meta Transactions Using EIP712 Signing Standard, also implement default Replay Protection using 2 dimensional nonces\\ncontract EIP712Forwarder is Forwarder, ReplayProtection {\\n\\n    // ///////////////////////////// FORWARDING EOA META TRANSACTION ///////////////////////////////////\\n\\n    bytes4 internal constant ERC1271_MAGICVALUE = 0x20c13b0b;\\n    bytes4 internal constant ERC1654_MAGICVALUE = 0x1626ba7e;\\n\\n    // Empty constructor\\n     constructor() {}\\n\\n    /// @notice forward call from EOA signed message\\n    /// @param message.from address from which the message come from (For EOA this is the same as signer)\\n    /// @param message.to target of the call\\n    /// @param message.replayProtection contract address that check and update nonce\\n    /// @param message.nonce nonce value\\n    /// @param message.data call data\\n    /// @param message.innerMessageHash extra data hashed that can be used as embedded message for implementing more complex scenario, with one sig\\n    /// @param signatureType signatureType either EOA, EIP1271 or EIP1654\\n    /// @param signature signature\\n    function forward(\\n        Message memory message,\\n        SignatureType signatureType,\\n        bytes memory signature\\n    ) public override payable { // external with ABIEncoderV2 Struct is not supported in solidity < 0.6.4\\n        require(_isValidChainId(message.chainId), \\\"INVALID_CHAIN_ID\\\");\\n        _checkSigner(message, signatureType, signature);\\n        // optimization to avoid call if using default nonce strategy\\n        // this contract implements a default nonce strategy and can be called directly\\n        if (message.replayProtection == address(0) || message.replayProtection == address(this)) {\\n            require(checkAndUpdateNonce(message.from, message.nonce), \\\"NONCE_INVALID\\\");\\n        } else {\\n            require(ReplayProtection(message.replayProtection).checkAndUpdateNonce(message.from, message.nonce), \\\"NONCE_INVALID\\\");\\n        }\\n\\n        _call(message.from, message.to, msg.value, message.data);\\n    }\\n\\n\\n    // /////////////////////////////////// BATCH CALL /////////////////////////////////////\\n\\n    struct Call {\\n        address to;\\n        bytes data;\\n        uint256 value;\\n    }\\n\\n    /// @notice batcher function that can be called as part of a meta transaction (allowing to batch call atomically)\\n    /// @param calls list of call data and destination\\n    function batch(Call[] memory calls) public payable { // external with ABIEncoderV2 Struct is not supported in solidity < 0.6.4\\n        require(msg.sender == address(this), \\\"FORWARDER_ONLY\\\");\\n        address signer;\\n        bytes memory data = msg.data;\\n        uint256 length = msg.data.length;\\n        assembly { signer := and(mload(sub(add(data, length), 0x00)), 0xffffffffffffffffffffffffffffffffffffffff) }\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            _call(signer, calls[i].to, calls[i].value, calls[i].data);\\n        }\\n    }\\n\\n    // /////////////////////////////////// REPLAY PROTECTION /////////////////////////////////////\\n\\n    mapping(address => mapping(uint128 => uint128)) _batches;\\n\\n    /// @notice implement a default nonce stategy\\n    /// @param signer address to check and update nonce for\\n    /// @param nonce value of nonce sent as part of the forward call\\n    function checkAndUpdateNonce(address signer, bytes memory nonce) public override returns (bool) {\\n        // TODO? default nonce strategy could be different (maybe the most versatile : batchId + Nonce)\\n        uint256 value = abi.decode(nonce, (uint256));\\n        uint128 batchId = uint128(value / 2**128);\\n        uint128 batchNonce = uint128(value % 2**128);\\n\\n        uint128 currentNonce = _batches[signer][batchId];\\n        if (batchNonce == currentNonce) {\\n            _batches[signer][batchId] = currentNonce + 1;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getNonce(address signer, uint128 batchId) external view returns (uint128) {\\n        return _batches[signer][batchId];\\n    }\\n\\n\\n    // ///////////////////////////////// INTERNAL ////////////////////////////////////////////\\n\\n    function _call(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        (bool success,) = to.call{value:value}(abi.encodePacked(data, from));\\n        if (!success) {\\n            assembly {\\n                let returnDataSize := returndatasize()\\n                returndatacopy(0, 0, returnDataSize)\\n                revert(0, returnDataSize)\\n            }\\n        }\\n    }\\n\\n    function _checkSigner(\\n        Message memory message,\\n        SignatureType signatureType,\\n        bytes memory signature\\n    ) internal view returns (address) {\\n        bytes memory dataToHash = _encodeMessage(message);\\n        if (signatureType == SignatureType.EIP1271) {\\n            require(ERC1271(message.from).isValidSignature(dataToHash, signature) == ERC1271_MAGICVALUE, \\\"SIGNATURE_1271_INVALID\\\");\\n        } else if(signatureType == SignatureType.EIP1654){\\n            require(ERC1654(message.from).isValidSignature(keccak256(dataToHash), signature) == ERC1654_MAGICVALUE, \\\"SIGNATURE_1654_INVALID\\\");\\n        } else {\\n            address signer = SigUtil.recover(keccak256(dataToHash), signature);\\n            require(signer == message.from, \\\"SIGNATURE_WRONG_SIGNER\\\");\\n        }\\n    }\\n\\n    function _isValidChainId(uint256 chainId) internal view returns (bool) {\\n        uint256 _chainId;\\n        assembly {_chainId := chainid() }\\n        return chainId == _chainId;\\n    }\\n\\n    bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version)\\\"\\n    );\\n    bytes32 constant DOMAIN_SEPARATOR = keccak256(\\n        abi.encode(\\n            EIP712DOMAIN_TYPEHASH,\\n            keccak256(\\\"Forwarder\\\"),\\n            keccak256(\\\"1\\\")\\n        )\\n    );\\n\\n    bytes32 constant METATRANSACTION_TYPEHASH = keccak256(\\n        \\\"MetaTransaction(address from,address to,uint256 value,uint256 chainId,address replayProtection,bytes nonce,bytes data,bytes32 innerMessageHash)\\\"\\n    );\\n\\n    function _encodeMessage(Message memory message) internal view returns (bytes memory) {\\n        return abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            DOMAIN_SEPARATOR,\\n            keccak256(abi.encode(\\n                METATRANSACTION_TYPEHASH,\\n                message.from,\\n                message.to,\\n                msg.value,\\n                message.chainId,\\n                message.replayProtection,\\n                keccak256(message.nonce),\\n                keccak256(message.data),\\n                message.innerMessageHash\\n            ))\\n        );\\n    }\\n}\"}}}","address":"0x9Aac7e122D0A6302F0c987b47AD1Bb29d7e453E8","bytecode":"0x608060405234801561001057600080fd5b50610ff5806100206000396000f3fe60806040526004361061003f5760003560e01c806364f5244914610044578063b35b046f14610059578063b44581d91461008f578063fc54a5b8146100bc575b600080fd5b610057610052366004610afd565b6100cf565b005b34801561006557600080fd5b5061007961007436600461092d565b61022f565b6040516100869190610ce4565b60405180910390f35b34801561009b57600080fd5b506100af6100aa366004610979565b6102f3565b6040516100869190610f57565b6100576100ca3660046109ba565b610325565b6100dc83604001516103fb565b6101015760405162461bcd60e51b81526004016100f890610e51565b60405180910390fd5b61010c838383610404565b5060608301516001600160a01b03161580610133575060608301516001600160a01b031630145b1561016b5761014a8360000151846080015161022f565b6101665760405162461bcd60e51b81526004016100f890610ed3565b610212565b60608301518351608085015160405163b35b046f60e01b81526001600160a01b039093169263b35b046f926101a4929091600401610cb8565b602060405180830381600087803b1580156101be57600080fd5b505af11580156101d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f69190610aae565b6102125760405162461bcd60e51b81526004016100f890610ed3565b61022a83600001518460200151348660a001516105e9565b505050565b600080828060200190518101906102469190610c06565b6001600160a01b038516600090815260208181526040808320600160801b85046001600160801b03818116865291909352922054929350918382169116808214156102e4576001600160a01b0387166000908152602081815260408083206001600160801b039687168452909152902080546fffffffffffffffffffffffffffffffff19166001928301909416939093179092555091506102ed9050565b60009450505050505b92915050565b6001600160a01b03919091166000908152602081815260408083206001600160801b0394851684529091529020541690565b3330146103445760405162461bcd60e51b81526004016100f890610eab565b6000806000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525036808601516001600160a01b03169750949550925050505b84518110156103f4576103ec848683815181106103ab57fe5b6020026020010151600001518784815181106103c357fe5b6020026020010151604001518885815181106103db57fe5b6020026020010151602001516105e9565b600101610392565b5050505050565b4681145b919050565b60008061041085610679565b9050600284600281111561042057fe5b14156104d35784516040516320c13b0b60e01b808252916001600160a01b0316906320c13b0b906104579085908890600401610d8c565b60206040518083038186803b15801561046f57600080fd5b505afa158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a79190610ad5565b6001600160e01b031916146104ce5760405162461bcd60e51b81526004016100f890610dba565b6105e1565b60018460028111156104e157fe5b141561059557845181516020830120604051630b135d3f60e11b808252926001600160a01b031691631626ba7e9161051e91908890600401610d55565b60206040518083038186803b15801561053657600080fd5b505afa15801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e9190610ad5565b6001600160e01b031916146104ce5760405162461bcd60e51b81526004016100f890610f27565b60006105a88280519060200120856107ae565b905085600001516001600160a01b0316816001600160a01b0316146105df5760405162461bcd60e51b81526004016100f890610e7b565b505b509392505050565b6000836001600160a01b0316838387604051602001610609929190610c66565b60408051601f198184030181529082905261062391610c4a565b60006040518083038185875af1925050503d8060008114610660576040519150601f19603f3d011682016040523d82523d6000602084013e610665565b606091505b50509050806103f4573d806000803e806000fd5b60607fb03948446334eb9b2196d5eb166f69b9d49403eb4a12f36de8d3f9f3cb8e15c37f120599714c0efa8b82451455fbd88d8790bed40fbd0f47a2ae400fac3d9124257fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66040516020016106f093929190610d3f565b604051602081830303815290604052805190602001207f9fecc83e430d2067fcd82c70b88e61530e628707a3face3cf0642523b28f72288360000151846020015134866040015187606001518860800151805190602001208960a00151805190602001208a60c0015160405160200161077199989796959493929190610cef565b60405160208183030381529060405280519060200120604051602001610798929190610c9d565b6040516020818303038152906040529050919050565b600081516041146107d15760405162461bcd60e51b81526004016100f890610dea565b60208201516040830151606084015160001a601b8110156107f057601b015b8060ff16601b148061080557508060ff16601c145b6108215760405162461bcd60e51b81526004016100f890610efa565b600186828585604051600081526020016040526040516108449493929190610d6e565b6020604051602081039080840390855afa158015610866573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b0384166108995760405162461bcd60e51b81526004016100f890610e21565b50505092915050565b80356001600160a01b03811681146103ff57600080fd5b600082601f8301126108c9578081fd5b813567ffffffffffffffff8111156108dd57fe5b6108f0601f8201601f1916602001610f6b565b818152846020838601011115610904578283fd5b816020850160208301379081016020019190915292915050565b8035600381106103ff57600080fd5b6000806040838503121561093f578182fd5b610948836108a2565b9150602083013567ffffffffffffffff811115610963578182fd5b61096f858286016108b9565b9150509250929050565b6000806040838503121561098b578182fd5b610994836108a2565b915060208301356001600160801b03811681146109af578182fd5b809150509250929050565b600060208083850312156109cc578182fd5b823567ffffffffffffffff808211156109e3578384fd5b818501915085601f8301126109f6578384fd5b813581811115610a0257fe5b610a0f8485830201610f6b565b81815284810190848601875b84811015610a9f57813587016060818d03601f19011215610a3a57898afd5b60408051606081018181108a82111715610a5057fe5b8252610a5d838c016108a2565b81528183013589811115610a6f578c8dfd5b610a7d8f8d838701016108b9565b828d015250606092909201359082015284529287019290870190600101610a1b565b50909998505050505050505050565b600060208284031215610abf578081fd5b81518015158114610ace578182fd5b9392505050565b600060208284031215610ae6578081fd5b81516001600160e01b031981168114610ace578182fd5b600080600060608486031215610b11578081fd5b833567ffffffffffffffff80821115610b28578283fd5b9085019060e08288031215610b3b578283fd5b610b4560e0610f6b565b610b4e836108a2565b8152610b5c602084016108a2565b602082015260408301356040820152610b77606084016108a2565b6060820152608083013582811115610b8d578485fd5b610b99898286016108b9565b60808301525060a083013582811115610bb0578485fd5b610bbc898286016108b9565b60a08301525060c083810135908201529450610bda6020870161091e565b93506040860135915080821115610bef578283fd5b50610bfc868287016108b9565b9150509250925092565b600060208284031215610c17578081fd5b5051919050565b60008151808452610c36816020860160208601610f8f565b601f01601f19169290920160200192915050565b60008251610c5c818460208701610f8f565b9190910192915050565b60008351610c78818460208801610f8f565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0383168152604060208201819052600090610cdc90830184610c1e565b949350505050565b901515815260200190565b9889526001600160a01b0397881660208a015295871660408901526060880194909452608087019290925290931660a085015260c084019290925260e08301919091526101008201526101200190565b9283526020830191909152604082015260600190565b600083825260406020830152610cdc6040830184610c1e565b93845260ff9290921660208401526040830152606082015260800190565b600060408252610d9f6040830185610c1e565b8281036020840152610db18185610c1e565b95945050505050565b60208082526016908201527514d251d3905515549157cc4c8dcc57d253959053125160521b604082015260600190565b60208082526018908201527f5349474e41545552455f494e56414c49445f4c454e4754480000000000000000604082015260600190565b6020808252601690820152755349474e41545552455f5a45524f5f4144445245535360501b604082015260600190565b60208082526010908201526f1253959053125117d0d210525397d25160821b604082015260600190565b60208082526016908201527529a4a3a720aa2aa922afaba927a723afa9a4a3a722a960511b604082015260600190565b6020808252600e908201526d464f525741524445525f4f4e4c5960901b604082015260600190565b6020808252600d908201526c1393d390d157d2539590531251609a1b604082015260600190565b60208082526013908201527229a4a3a720aa2aa922afa4a72b20a624a22fab60691b604082015260600190565b60208082526016908201527514d251d3905515549157cc4d8d4d17d253959053125160521b604082015260600190565b6001600160801b0391909116815260200190565b60405181810167ffffffffffffffff81118282101715610f8757fe5b604052919050565b60005b83811015610faa578181015183820152602001610f92565b83811115610fb9576000848401525b5050505056fea264697066735822122032d558255d4d4611ef6709c33e4bb420031041f1c48b5e819b6dffb6246bb20464736f6c63430007060033","deployedBytecode":"","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct EIP712Forwarder.Call[]","name":"calls","type":"tuple[]"}],"name":"batch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"bytes","name":"nonce","type":"bytes"}],"name":"checkAndUpdateNonce","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"replayProtection","type":"address"},{"internalType":"bytes","name":"nonce","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes32","name":"innerMessageHash","type":"bytes32"}],"internalType":"struct Forwarder.Message","name":"message","type":"tuple"},{"internalType":"enum Forwarder.SignatureType","name":"signatureType","type":"uint8"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"forward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"uint128","name":"batchId","type":"uint128"}],"name":"getNonce","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"}]}