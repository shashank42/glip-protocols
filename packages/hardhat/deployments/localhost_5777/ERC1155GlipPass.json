{"metadata":"{\"compiler\":{\"version\":\"0.7.5\"},\"sources\":{\"contracts/tokens/erc-1155/ERC1155GlipPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC1155Lazy.sol\\\";\\nimport \\\"./../../meta-tx/ForwarderReceiverBase.sol\\\";\\n\\ncontract ERC1155GlipPass is ForwarderReceiverBase, ERC1155Lazy {\\n    /// @dev true if collection is private, false if public\\n    bool isPrivate;\\n\\n    event CreateERC1155GlipPass(address owner, string name, string symbol);\\n    \\n    function __ERC1155GlipPass_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address exchangeProxy, address defaultMinter, address forwarder) external initializer {\\n        __ERC1155GlipPass_init_unchained(_name, _symbol, baseURI, contractURI, exchangeProxy, defaultMinter, forwarder);\\n        emit CreateERC1155GlipPass(_msgSender(), _name, _symbol);\\n    }\\n    \\n    function __ERC1155GlipPass_init_unchained(string memory _name, string memory _symbol,  string memory baseURI, string memory contractURI, address exchangeProxy, address defaultMinter, address forwarder) internal {\\n        __Ownable_init_unchained();\\n        __ERC1155Lazy_init_unchained(defaultMinter);\\n        __ERC165_init_unchained();\\n        __Context_init_unchained();\\n        __Mint1155Validator_init_unchained();\\n        __ERC1155_init_unchained(\\\"\\\");\\n        __HasContractURI_init_unchained(contractURI);\\n        __ERC1155Burnable_init_unchained();\\n        __RoyaltiesUpgradeable_init_unchained();\\n        __ERC1155Base_init_unchained(_name, _symbol);\\n        _setURI(baseURI);\\n        __ForwarderReceiverBase_init(forwarder);\\n\\n\\n        //setting default approver for transferProxies\\n        _setDefaultApproval(exchangeProxy, true);\\n    }\\n\\n    function _msgSender() internal view virtual override(ForwarderReceiverBase, ContextUpgradeable) returns (address payable) {\\n        return ForwarderReceiverBase._msgSender();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/tokens/@rarible/royalties/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n    bytes32 public constant ARRAY_TYPE_HASH = keccak256(\\\"Parts(Part[] parts)Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n    \\n    function hashParts(Part[] memory parts) internal pure returns (bytes32) {\\n        bytes32[] memory partsBytes = new bytes32[](parts.length);\\n        for (uint256 i = 0; i < parts.length; i++) {\\n            partsBytes[i] = LibPart.hash(parts[i]);\\n        }\\n        return keccak256(abi.encode(ARRAY_TYPE_HASH, keccak256(abi.encodePacked(partsBytes))));\\n    }\\n\\n}\\n\"},\"contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma abicoder v2;\\npragma solidity >=0.6.2 <0.8.0;\\nimport \\\"../LibPart.sol\\\";\\nabstract contract AbstractRoyalties {\\n\\n    event SaveRoyaltySplitter(uint256 id, bytes32 royaltySplitterBytes);\\n    event SaveCreatorSignedRoyalty(uint256 id, LibPart.Part royalty);\\n\\n    mapping (uint256 => LibPart.Part) creatorSignedRoyalty;\\n    mapping (uint256 => bytes32) royaltySplitterBytesMap;\\n\\n    function _saveRoyalties(uint256 id, bytes32 royaltySplitterBytes ) internal {\\n        royaltySplitterBytesMap[id] = royaltySplitterBytes;\\n        emit SaveRoyaltySplitter(id, royaltySplitterBytes);\\n    }\\n\\n    function _saveCreatorSignedRoyalties(uint256 id, address creator, LibPart.Part memory royalty ) internal {\\n\\n        emit SaveCreatorSignedRoyalty(id, royalty);\\n        if (royalty.account == creator && creator == address(id >> 96)) {\\n            // To save gas don't set the account as it can be recovered\\n            royalty.account = address(0x0);\\n        }\\n        creatorSignedRoyalty[id] = royalty;\\n        \\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, address wallet, LibPart.Part[] memory _royalties) virtual internal;\\n}\\n\"},\"contracts/tokens/@rarible/royalties/contracts/Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface Royalties {\\n    event RoyaltiesSet(uint256 tokenId, address wallet, LibPart.Part[] royalties);\\n}\\n\"},\"contracts/roles/IMinterUpgradeable.sol\":{\"content\":\"\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../tokens/@rarible/royalties/contracts/LibPart.sol\\\";\\n\\ninterface IMinterUpgradeable {\\n\\n    function getDetailsForMinting(address _token, address _creator, address _signer) external view returns (\\n        uint96,\\n        LibPart.Part[] memory,\\n        bytes32,\\n        LibPart.Part memory);\\n\\n    function getDetailsForRoyalty(address _token, address _creator, address _signer) external view returns (\\n        bytes32\\n    );\\n\\n    function getSplitter(bytes32 signature) external view returns(LibPart.Part memory);\\n\\n    function recieveRoyaltyStake() external payable;\\n}\\n\"},\"contracts/tokens/@rarible/royalties/contracts/impl/RoyaltiesImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AbstractRoyalties.sol\\\";\\nimport \\\"../Royalties.sol\\\";\\nimport \\\"./../../../../../roles/IMinterUpgradeable.sol\\\";\\n\\ncontract RoyaltiesImpl is AbstractRoyalties {\\n\\n    function _onRoyaltiesSet(uint256 id, address wallet, LibPart.Part[] memory _royalties) override internal {\\n        // emit RoyaltiesSet(id, wallet, _royalties);\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/tokens/@rarible/royalties/contracts/LibRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibRoyalties {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\"},\"contracts/tokens/@rarible/royalties-upgradeable/contracts/RoyaltiesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./../../../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"./../../royalties/contracts/LibRoyalties.sol\\\";\\nimport \\\"./../../royalties/contracts/Royalties.sol\\\";\\n\\nabstract contract RoyaltiesUpgradeable is ERC165Upgradeable, Royalties {\\n    function __RoyaltiesUpgradeable_init_unchained() internal initializer {\\n        _registerInterface(LibRoyalties._INTERFACE_ID_ROYALTIES);\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"},\"contracts/tokens/@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./../../../royalties/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 public constant ERC1155_LAZY_ASSET_CLASS =\\n        bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x6db15a0f;\\n\\n    struct Mint1155Data {\\n        uint256 tokenId;\\n        uint256 reserve;\\n        uint256 supply;\\n        uint256 amount;\\n        address payable creator;\\n        address payable minter;\\n        LibPart.Part[] creators;\\n        LibPart.Part royalty;\\n        bytes signature;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\\n        keccak256(\\n            \\\"Mint1155(uint256 tokenId,uint256 reserve,uint256 supply,uint256 amount,address creator,address minter,Part[] creators,Part royalty)Part(address account,uint96 value)\\\"\\n        );\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint256 i = 0; i < data.creators.length; i++) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MINT_AND_TRANSFER_TYPEHASH,\\n                    data.tokenId,\\n                    data.reserve,\\n                    data.supply,\\n                    data.amount,\\n                    data.creator,\\n                    data.minter,\\n                    keccak256(abi.encodePacked(creatorsBytes)),\\n                    LibPart.hash(data.royalty)\\n                )\\n            );\\n    }\\n}\\n\"},\"contracts/tokens/@rarible/lazy-mint/contracts/erc-1155/IERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./../../../../@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./LibERC1155LazyMint.sol\\\";\\nimport \\\"./../../../royalties/contracts/LibPart.sol\\\";\\n\\ninterface IERC1155LazyMint is IERC1155Upgradeable {\\n\\n    event Supply(\\n        uint256 tokenId,\\n        uint256 value\\n    );\\n    event Creators(\\n        uint256 tokenId,\\n        LibPart.Part[] creators\\n    );\\n\\n    function transferFromOrMint(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address from,\\n        address to\\n    ) external;\\n}\\n\"},\"contracts/tokens/erc-1271/ERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nabstract contract ERC1271 {\\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\\n\\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x1626ba7e;\\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public virtual view returns (bytes4);\\n\\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\\n    }\\n}\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/@rarible/libraries/contracts/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\"},\"contracts/tokens/erc-1271/ERC1271Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC1271.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\nimport \\\"./../@rarible/libraries/contracts/LibSignature.sol\\\";\\n\\nabstract contract ERC1271Validator is EIP712Upgradeable {\\n    using AddressUpgradeable for address;\\n    using LibSignature for bytes32;\\n\\n    string constant SIGNATURE_ERROR = \\\"signature verification error\\\";\\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function validate1271(address signer, bytes32 structHash, bytes memory signature) internal view returns (address) {\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signerFromSig;\\n        if (signature.length == 65) {\\n            signerFromSig = hash.recover(signature);\\n        }\\n        if  (signerFromSig != signer) {\\n            if (signer.isContract()) {\\n                require(\\n                    ERC1271(signer).isValidSignature(hash, signature) == MAGICVALUE,\\n                    SIGNATURE_ERROR\\n                );\\n            } else {\\n                revert(SIGNATURE_ERROR);\\n            }\\n        }\\n\\n        return signerFromSig;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/erc-1155/Mint1155Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../erc-1271/ERC1271Validator.sol\\\";\\nimport \\\"./../@rarible/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\n\\ncontract Mint1155Validator is ERC1271Validator {\\n    function __Mint1155Validator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Mint1155\\\", \\\"1\\\");\\n    }\\n\\n    function validate(address account, bytes32 hash, bytes memory signature) internal view returns(address) {\\n        return validate1271(account, hash, signature);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"},\"contracts/tokens/LibURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibURI {\\n    /// @dev checks if _tokenURI starts with base. if true returns _tokenURI, else base + _tokenURI\\n    function checkPrefix(string memory base, string memory _tokenURI)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory whatBytes = bytes(base);\\n        bytes memory whereBytes = bytes(_tokenURI);\\n\\n        if (whatBytes.length > whereBytes.length) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        for (uint256 j = 0; j < whatBytes.length; j++) {\\n            if (whereBytes[j] != whatBytes[j]) {\\n                return string(abi.encodePacked(base, _tokenURI));\\n            }\\n        }\\n\\n        return _tokenURI;\\n    }\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _setOwnership(msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwnership(address(0));\\n    }\\n\\n    function _setOwnership(address newOwner) internal virtual {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwnership(newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n        _registerInterface(\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"contracts/tokens/erc-1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./../@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) internal _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return string(abi.encodePacked(_uri, uint2str(getThisChainID()), \\\"/\\\", addressToString(address(this)), \\\"/{id}.json\\\"));\\n    }\\n\\n    function addressToString(address _address) public pure returns (string memory _uintAsString) {\\n      uint _i = uint256(_address);\\n      if (_i == 0) {\\n          return \\\"0\\\";\\n      }\\n      uint j = _i;\\n      uint len;\\n      while (j != 0) {\\n          len++;\\n          j /= 10;\\n      }\\n      bytes memory bstr = new bytes(len);\\n      uint k = len - 1;\\n      while (_i != 0) {\\n          bstr[k--] = byte(uint8(48 + _i % 10));\\n          _i /= 10;\\n      }\\n      return string(bstr);\\n    }\\n\\n    function uint2str(uint _i) internal virtual pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function getThisChainID() internal virtual pure returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) internal pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\"},\"contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155Upgradeable.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155Burnable_init_unchained();\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal initializer {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/erc-1155/ERC1155DefaultApproval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC1155Upgradeable.sol\\\";\\n\\nabstract contract ERC1155DefaultApproval is ERC1155Upgradeable {\\n\\n    mapping(address => bool) private defaultApprovals;\\n\\n    event DefaultApproval(address indexed operator, bool hasApproval);\\n\\n    function _setDefaultApproval(address operator, bool hasApproval) internal {\\n        defaultApprovals[operator] = hasApproval;\\n        emit DefaultApproval(operator, hasApproval);\\n    }\\n    \\n    function _isDefaultApproved(address operator) internal view returns(bool) {\\n        return defaultApprovals[operator];\\n    }\\n\\n    function isApprovedForAll(address _owner, address _operator) public virtual override view returns (bool) {\\n        return defaultApprovals[_operator] || super.isApprovedForAll(_owner, _operator);\\n    }\\n    \\n    uint256[50] private __gap;\\n\\n}\\n\"},\"contracts/tokens/HasContractURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\n\\nabstract contract HasContractURI is ERC165Upgradeable {\\n\\n    string public contractURI;\\n\\n    /*\\n     * bytes4(keccak256('contractURI()')) == 0xe8a3d485\\n     */\\n    bytes4 private constant _INTERFACE_ID_CONTRACT_URI = 0xe8a3d485;\\n\\n    function __HasContractURI_init_unchained(string memory _contractURI) internal initializer {\\n        contractURI = _contractURI;\\n        _registerInterface(_INTERFACE_ID_CONTRACT_URI);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the contract URI\\n     * @param _contractURI string URI prefix to assign\\n     */\\n    function _setContractURI(string memory _contractURI) internal {\\n        contractURI = _contractURI;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/tokens/erc-1155/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"./ERC1155DefaultApproval.sol\\\";\\nimport \\\"../HasContractURI.sol\\\";\\n\\nabstract contract ERC1155Base is OwnableUpgradeable, ERC1155DefaultApproval, ERC1155BurnableUpgradeable, HasContractURI {\\n\\n    string public name;\\n    string public symbol;\\n\\n    function isApprovedForAll(address _owner, address _operator) public override(ERC1155Upgradeable, ERC1155DefaultApproval) view returns (bool) {\\n        return ERC1155DefaultApproval.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual override(ERC1155Upgradeable) {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    function __ERC1155Base_init_unchained(string memory _name, string memory _symbol) internal initializer {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/tokens/erc-1155/ERC1155BaseURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./../@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"../LibURI.sol\\\";\\n\\nimport \\\"./ERC1155Base.sol\\\";\\n\\ncontract ERC1155BaseURI is ERC1155Base {\\n\\n    function setURI(string memory newuri) external virtual {\\n        require(_isDefaultApproved(_msgSender()) || _msgSender() == owner(), \\\"Not allowed\\\");\\n        super._setURI(newuri);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/exchange/IGlipERC721LazyData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./../tokens/@rarible/royalties/contracts/LibPart.sol\\\";\\n\\ninterface IGlipERC721LazyData {\\n\\n    struct DecodedMintData {\\n        uint256 tokenId; // Token id\\n        uint256 reserve; // Reserve\\n        address creator; // Primary creator\\n        LibPart.Part[] payouts; // Payout split %s\\n        LibPart.Part minter; // Minter fee %\\n        LibPart.Part royalty;\\n    }\\n\\n}\\n\"},\"contracts/tokens/@rarible/royalties/contracts/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\nimport \\\"./LibPart.sol\\\";\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\n//interface IERC2981 is IERC165 {\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n}\"},\"contracts/tokens/erc-1155/ERC1155Lazy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n\\nimport \\\"./../@rarible/royalties/contracts/impl/RoyaltiesImpl.sol\\\";\\nimport \\\"./../@rarible/royalties-upgradeable/contracts/RoyaltiesUpgradeable.sol\\\";\\nimport \\\"./../@rarible/lazy-mint/contracts/erc-1155/IERC1155LazyMint.sol\\\";\\nimport \\\"./Mint1155Validator.sol\\\";\\nimport \\\"./ERC1155BaseURI.sol\\\";\\n\\nimport \\\"./../../roles/IMinterUpgradeable.sol\\\";\\nimport \\\"./../../exchange/IGlipERC721LazyData.sol\\\";\\n\\nimport \\\"./../@rarible/royalties/contracts/IERC2981.sol\\\";\\n\\nimport \\\"./ERC1155Base.sol\\\";\\n\\nabstract contract ERC1155Lazy is\\n    ERC1155BaseURI,\\n    IERC1155LazyMint,\\n    Mint1155Validator,\\n    RoyaltiesUpgradeable,\\n    RoyaltiesImpl,\\n    IERC2981\\n{\\n\\n    using SafeMathUpgradeable for uint256;\\n    \\n    uint256 constant CREATOR_MASK = uint256(type(uint160).max) << 96;\\n    uint256 constant NON_FUNGIBLE_MASK = uint256(type(uint56).max) << 40;\\n    uint256 constant FUNGIBLE_MASK = uint256(type(uint40).max);\\n\\n\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    mapping(uint256 => uint256) public supply;\\n    mapping(uint256 => uint256) public minted;\\n    mapping(uint256 => uint256) private reserves;\\n    mapping(uint256 => uint256) public tokenIdCounter;\\n    mapping(uint256 => bool) public convertable;\\n\\n    address public minter;\\n\\n    function __ERC1155Lazy_init_unchained( address _minter)\\n        internal\\n        initializer\\n    {\\n        minter = _minter;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165Upgradeable, ERC165Upgradeable, ERC1155Base)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == LibERC1155LazyMint._INTERFACE_ID_MINT_AND_TRANSFER ||\\n            interfaceId == LibRoyalties._INTERFACE_ID_ROYALTIES ||\\n            interfaceId == _INTERFACE_ID_ERC165 ||\\n            interfaceId == _INTERFACE_ID_ERC1155 ||\\n            interfaceId == _INTERFACE_ID_ERC1155_METADATA_URI ||\\n            interfaceId == _INTERFACE_ID_ERC2981 ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    // ------------- ENCODERS AND DECODERS FOR INTERNAL AND EXCHANGE CONTRACT ------ //\\n\\n    /*\\n    Encodes contract address and mint data to bytes\\n     */\\n    function encodeLazyMintData(LibERC1155LazyMint.Mint1155Data calldata data)\\n        external\\n        view\\n        virtual\\n        returns (bytes memory)\\n    {\\n        return abi.encode(address(this), data);\\n    }\\n\\n    /*\\n        Converts encoded data to what is required for minting by the Auction contract\\n        Namely - tokenId, primary creator, auctioneer, LibPart of primary sale split BPS\\n     */\\n    function decodeLazyMintData(bytes calldata encoded)\\n        external\\n        view\\n        virtual\\n        returns (IGlipERC721LazyData.DecodedMintData memory)\\n    {\\n        (address token, LibERC1155LazyMint.Mint1155Data memory data) = abi\\n            .decode(encoded, (address, LibERC1155LazyMint.Mint1155Data));\\n        require(token == address(this), \\\"Wrong contract\\\");\\n\\n        // Assume minter is right, we are verifying minter's signature anyway right before minting\\n        address signer = data.minter;\\n\\n        uint256 reserve;\\n        if (reserves[data.tokenId] == 0) {\\n            reserve = data.reserve;\\n        } else {\\n            reserve = reserves[data.tokenId];\\n        }\\n\\n        if (signer == data.creator) {\\n            uint256 totalPayouts;\\n            for (uint256 i = 0; i < data.creators.length; i++) {\\n                totalPayouts += data.creators[i].value;\\n            }\\n            require(totalPayouts == 10000, \\\"Payouts should be 10000\\\");\\n\\n            return (\\n                IGlipERC721LazyData.DecodedMintData(\\n                    data.tokenId,\\n                    reserve.mul(data.amount),\\n                    data.creator,\\n                    data.creators,\\n                    LibPart.Part(payable(0x0), 0),\\n                    data.royalty\\n                )\\n            );\\n        } else {\\n            // LibPart.Part[] memory\\n            // If signed by someone else then fetch the data from minter contract\\n            (\\n                uint96 fee,\\n                LibPart.Part[] memory creators,\\n                bytes32 royaltySplitterBytes,\\n                LibPart.Part memory royaltiesSplitter\\n            ) = IMinterUpgradeable(minter).getDetailsForMinting(\\n                    token,\\n                    data.creator,\\n                    signer\\n                );\\n            return (\\n                IGlipERC721LazyData.DecodedMintData(\\n                    data.tokenId,\\n                    reserve.mul(data.amount),\\n                    data.creator,\\n                    creators,\\n                    LibPart.Part(payable(signer), fee),\\n                    royaltiesSplitter\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n    @dev Decompose a raw tokenId into it's three composite parts\\n     */\\n    function decomposeTokenId(\\n        uint256 tokenId\\n    ) public pure virtual returns (address creator,uint256 nonFungibleId,uint256 fungibleId) {\\n        creator = address(tokenId >> 96);\\n        nonFungibleId = uint256((tokenId & NON_FUNGIBLE_MASK) >> 40);\\n        fungibleId = uint256(tokenId & FUNGIBLE_MASK);\\n    }\\n\\n    /**\\n    @dev Compose three composite parts to raw tokenId\\n     */\\n    function composeTokenId(\\n        address creator,uint256 nonFungibleId,uint256 fungibleId\\n    ) public pure virtual returns (uint256 tokenId) {\\n        return (uint256(creator) << 96) + (nonFungibleId << 40) + fungibleId;\\n    }\\n\\n    // ----------------------- VERIFIER -------------------------------------//\\n    function verifyAssetAndSigner(LibERC1155LazyMint.Mint1155Data memory data)\\n        internal\\n        view\\n        returns (address)\\n    {\\n\\n        require(data.amount > 0, \\\"amount incorrect\\\");\\n        uint256 newMinted = data.amount.add(minted[data.tokenId]);\\n        require((supply[data.tokenId] == 0 && newMinted <= data.supply ) || newMinted <= supply[data.tokenId], \\\"more than supply\\\");\\n\\n        \\n\\n        // In order for ensuring token id has space for both fungible and non-fungible\\n        // tokens that will get minted on burning\\n        // tokenId = (creatorAddress << 96) + passID (passID < 2^80)\\n        (address creator,uint256 nonFungibleId,uint256 fungibleId) = decomposeTokenId(data.tokenId);\\n        require(creator == data.creator);\\n        require(nonFungibleId == 0, \\\"Token id is wrong\\\");\\n\\n        // We need to check validity/legitimacy of the Asset\\n        // Creator of the asset contract can implement any arbitrary signing logic\\n        bytes32 hash = LibERC1155LazyMint.hash(data);\\n        address signer = validate(data.minter, hash, data.signature);\\n\\n        return signer;\\n    }\\n\\n    // --------------- MINT AND TRANSFER (Encoded and Decoded data) -------------------- //\\n\\n    /*\\n    Single function to execute transfer or mint using decoded data\\n     */\\n\\n    function transferFromOrMint(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address from,\\n        address to\\n    ) external virtual override {\\n        uint256 balance = balanceOf(from, data.tokenId);\\n        uint256 left = data.amount;\\n        if (balance != 0) {\\n            uint256 transfer = data.amount;\\n            if (balance < data.amount) {\\n                transfer = balance;\\n            }\\n            safeTransferFrom(from, to, data.tokenId, transfer, \\\"\\\");\\n            left = data.amount - transfer;\\n        }\\n        if (left > 0) {\\n            mintAndTransfer(data, to, left);\\n        }\\n    }\\n    \\n\\n    /*\\n    Can be called by an external contract with the encoded data to \\n    execute mintAndTransfer function without knowing the lazy form \\n    data structure\\n     */\\n    function mintAndTransferEncodedData(bytes memory encoded, address to) external virtual {\\n        (address token, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode( encoded, (address, LibERC1155LazyMint.Mint1155Data));\\n        require(token == address(this), \\\"Wrong contracts\\\");\\n        mintAndTransfer(data, to, data.amount);\\n    }\\n\\n    function mintAndTransfer(\\n        LibERC1155LazyMint.Mint1155Data memory data,\\n        address to,\\n        uint256 _amount\\n    ) internal virtual {\\n\\n        // Verify if message sender is approved address or owner\\n        require(isApprovedForAll(data.creator, _msgSender()) || _msgSender() == data.creator, \\\"Not approved\\\");\\n\\n        // Verify signer/minter\\n        address signer = verifyAssetAndSigner(data);\\n\\n        // Verify if creator has allowed the minter\\n        bytes32 royaltySplitterBytes = IMinterUpgradeable(minter).getDetailsForRoyalty(address(this), data.creator, signer);\\n\\n        require(_amount > 0, \\\"amount incorrect\\\");\\n\\n        if (supply[data.tokenId] == 0) {\\n\\n            require(data.supply > 0, \\\"supply incorrect\\\");\\n            _saveSupply(data.tokenId, data.supply);\\n\\n            if (signer == data.creator) {\\n            // Accept creator defined royalty\\n                _saveCreatorSignedRoyalties(data.tokenId, data.creator, data.royalty);\\n            } else {\\n                // Save royalty splitter bytes\\n                _saveRoyalties(data.tokenId, royaltySplitterBytes);\\n            }\\n        }\\n\\n        _mint(to, data.tokenId, _amount, \\\"\\\");\\n\\n        if (data.creator != to) {\\n            emit TransferSingle(\\n                _msgSender(),\\n                address(0),\\n                data.creator,\\n                data.tokenId,\\n                _amount\\n            );\\n            emit TransferSingle(_msgSender(), data.creator, to, data.tokenId, _amount);\\n        } else {\\n            emit TransferSingle(_msgSender(), address(0), data.creator, data.tokenId, _amount);\\n        }\\n    }\\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override {\\n        \\n        uint256 newMinted = amount.add(minted[id]);\\n        require(newMinted <= supply[id], \\\"more than supply\\\");\\n        minted[id] = amount.add(minted[id]); // newMinted;\\n\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    function _saveSupply(uint256 tokenId, uint256 _supply) internal {\\n        require(supply[tokenId] == 0);\\n        supply[tokenId] = _supply;\\n        emit Supply(tokenId, _supply);\\n    }\\n    \\n\\n    // For compliance with EIP2981\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view override returns (address, uint256) {\\n\\n        (address creator,uint256 nonFungibleId,uint256 fungibleId) = decomposeTokenId(_tokenId);\\n        uint256 baseTokenId = composeTokenId(creator, 0, fungibleId);\\n\\n        LibPart.Part memory royalty = creatorSignedRoyalty[baseTokenId];\\n        if (royalty.value != 0 && royalty.account == address(0x0)) {\\n            royalty.account = address(baseTokenId >> 96);\\n        } else if (royalty.value == 0 && royalty.account == address(0x0)) {\\n            royalty = IMinterUpgradeable(minter).getSplitter(royaltySplitterBytesMap[baseTokenId]);\\n        }\\n        return (royalty.account, uint((_salePrice * royalty.value)/10000));\\n    }\\n\\n    function allowConversion(uint256 id) external virtual onlyOwner {\\n        convertable[id] = true;\\n    }\\n\\n    function convertPass( address account, uint256 id, uint256 amount ) external virtual {\\n\\n        require(convertable[id], \\\"Not ready to be converted\\\");\\n        (address creator,uint256 nonFungibleId,uint256 fungibleId) = decomposeTokenId(id);\\n        require(nonFungibleId == 0, \\\"Can only burn fungible\\\");\\n\\n        _burn(account, id, amount);\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter[id]++;\\n            uint256 newTokenId = composeTokenId(creator, tokenIdCounter[id], fungibleId);\\n            \\n            if (supply[newTokenId] == 0) {\\n                _saveSupply(newTokenId, 1);\\n            }\\n\\n            _mint(account, newTokenId, 1, \\\"\\\");\\n            emit TransferSingle(\\n                _msgSender(),\\n                address(0),\\n                account,\\n                newTokenId,\\n                1\\n            );\\n        }\\n        \\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/meta-tx/ForwarderReceiverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./../tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract ForwarderReceiverBase is Initializable, OwnableUpgradeable {\\n    address /* immutable */ _forwarder;\\n    \\n    function __ForwarderReceiverBase_init(address forwarder) internal initializer {\\n        _forwarder = forwarder;\\n    }\\n\\n    function updateForwarder(address forwarder) external onlyOwner {\\n        _forwarder = forwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address payable signer) {\\n        if (msg.sender == _forwarder) {\\n            bytes memory data = msg.data;\\n            uint256 length = msg.data.length;\\n            assembly { \\n                signer := and(mload(sub(add(data, length), 0x00)), 0xffffffffffffffffffffffffffffffffffffffff) \\n                }\\n        } else {\\n            signer = msg.sender;\\n        }\\n\\t}\\n}\"}}}","address":"0xcF255E9Fd288077948dD0D721539f27F8105B026","bytecode":"0x608060405234801561001057600080fd5b5061568a806100206000396000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c80636b20c4541161011a578063bf93f0e0116100ad578063e985e9c51161007c578063e985e9c514610465578063e9d2e85f14610478578063f242432a1461048b578063f2fde38b1461049e578063f5298aca146104b157610205565b8063bf93f0e014610424578063d06fe2d314610437578063db51a7331461044a578063e8a3d4851461045d57610205565b806395d89b41116100e957806395d89b41146103d457806396cdc2a2146103dc578063a22cb465146103fe578063a9d41d4a1461041157610205565b80636b20c4541461039e578063715018a6146103b15780637dc0bf3f146103b95780638da5cb5b146103cc57610205565b80632291237e1161019d5780632eb2c2d61161016c5780632eb2c2d61461032557806335403023146103385780634e1273f41461034b5780635e57966d1461036b578063604802081461037e57610205565b80632291237e146102cb5780632624146e146102de57806328bc2276146102f15780632a55205a1461030457610205565b806307546172116101d9578063075461721461027d5780630e89341c14610292578063147d847a146102a5578063148a6a8d146102b857610205565b8062fdd58e1461020a57806301ffc9a71461023357806302fe53051461025357806306fdde0314610268575b600080fd5b61021d610218366004614770565b6104c4565b60405161022a9190614e9c565b60405180910390f35b61024661024136600461489c565b610536565b60405161022a9190614e91565b610266610261366004614974565b6105ea565b005b61027061066f565b60405161022a9190614ea5565b6102856106fe565b60405161022a9190614cce565b6102706102a0366004614b33565b61070e565b6102666102b3366004614930565b61085e565b6102666102c6366004614ab7565b6108c0565b6102666102d936600461441a565b61092f565b6102706102ec366004614a7f565b6109b3565b6102666102ff3660046149a6565b6109de565b610317610312366004614b4b565b610ad8565b60405161022a929190614e13565b6102666103333660046145be565b610c48565b61021d610346366004614b33565b610f46565b61035e6103593660046147cf565b610f59565b60405161022a9190614e4d565b61027061037936600461441a565b611044565b61039161038c3660046148c4565b611127565b60405161022a91906150b7565b6102666103ac3660046146cd565b6113e0565b610266611459565b61021d6103c7366004614b33565b6114c7565b6102856114da565b6102706114ea565b6103ef6103ea366004614b33565b611546565b60405161022a93929190614e2c565b61026661040c36600461473f565b611565565b61021d61041f366004614b33565b611654565b610246610432366004614b33565b611667565b610266610445366004614b33565b61167d565b61026661045836600461479b565b6116fb565b61027061182d565b610246610473366004614586565b611889565b61021d61048636600461479b565b61189c565b610266610499366004614667565b6118bf565b6102666104ac36600461441a565b611a78565b6102666104bf36600461479b565b611b28565b60006001600160a01b03831661050b5760405162461bcd60e51b815260040180806020018281038252602b8152602001806153e6602b913960400191505060405180910390fd5b5060008181526098602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636db15a0f60e01b148061056757506001600160e01b0319821663656cb66560e11b145b8061058257506001600160e01b031982166301ffc9a760e01b145b8061059d57506001600160e01b03198216636cdb3d1360e11b145b806105b857506001600160e01b031982166303a24d0760e21b145b806105d357506001600160e01b0319821663152a902d60e11b145b806105e257506105e282611b9c565b90505b919050565b6105fa6105f5611ba7565b611bb6565b8061062457506106086114da565b6001600160a01b0316610619611ba7565b6001600160a01b0316145b610663576040805162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015290519081900360640190fd5b61066c81611bd4565b50565b610161805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106f65780601f106106cb576101008083540402835291602001916106f6565b820191906000526020600020905b8154815290600101906020018083116106d957829003601f168201915b505050505081565b610266546001600160a01b031681565b6060609a61072261071d611beb565b611bef565b61072b30611044565b60405160200180848054600181600116156101000203166002900480156107895780601f10610767576101008083540402835291820191610789565b820191906000526020600020905b815481529060010190602001808311610775575b5050835160208501908083835b602083106107b55780518252601f199092019160209182019101610796565b6001836020036101000a03801982511681845116808217855250505050505090500180602f60f81b81525060010182805190602001908083835b6020831061080e5780518252601f1990920191602091820191016107ef565b5181516020939093036101000a60001901801990911692169190911790526917bdb4b23e973539b7b760b11b92019182525060408051808303601519018152600a90920190529695505050505050565b600080838060200190518101906108759190614483565b90925090506001600160a01b03821630146108ab5760405162461bcd60e51b81526004016108a290614fec565b60405180910390fd5b6108ba81848360600151611cd0565b50505050565b60006108d08385600001516104c4565b60608501519091508115610917576060850151808310156108ee5750815b61090e8585886000015184604051806020016040528060008152506118bf565b60608601510390505b801561092857610928858483611cd0565b5050505050565b610937611ba7565b6001600160a01b03166109486114da565b6001600160a01b031614610991576040805162461bcd60e51b815260206004820181905260248201526000805160206155bb833981519152604482015290519081900360640190fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b606030826040516020016109c8929190614d3b565b6040516020818303038152906040529050919050565b600054610100900460ff16806109f757506109f7611fa5565b80610a05575060005460ff16155b610a405760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff16158015610a6b576000805460ff1961ff0019909116610100171660011790555b610a7a88888888888888611fb6565b7f4d0290271320f2b165e5c103ef544b65229742343c247bce5dcee4b877ec36cb610aa3611ba7565b8989604051610ab493929190614ce2565b60405180910390a18015610ace576000805461ff00191690555b5050505050505050565b6000806000806000610ae987611546565b9250925092506000610afd8460008461189c565b600081815261025f60209081526040918290208251808401909352546001600160a01b0381168352600160a01b90046001600160601b03169082018190529192509015801590610b55575080516001600160a01b0316155b15610b6657606082901c8152610c20565b60208101516001600160601b0316158015610b89575080516001600160a01b0316155b15610c20576102665460008381526102606020526040908190205490516393c93ecd60e01b81526001600160a01b03909216916393c93ecd91610bce91600401614e9c565b604080518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190614b18565b90505b80516020820151612710906001600160601b03168a02049650965050505050505b9250929050565b8151835114610c885760405162461bcd60e51b815260040180806020018281038252602881526020018061562d6028913960400191505060405180910390fd5b6001600160a01b038416610ccd5760405162461bcd60e51b81526004018080602001828103825260258152602001806154a66025913960400191505060405180910390fd5b610cd5611ba7565b6001600160a01b0316856001600160a01b03161480610cfb5750610cfb85610473611ba7565b610d365760405162461bcd60e51b81526004018080602001828103825260328152602001806154cb6032913960400191505060405180910390fd5b6000610d40611ba7565b9050610d50818787878787610f3e565b60005b8451811015610e56576000858281518110610d6a57fe5b602002602001015190506000858381518110610d8257fe5b60200260200101519050610def816040518060600160405280602a8152602001615570602a91396098600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546120379092919063ffffffff16565b60008381526098602090815260408083206001600160a01b038e811685529252808320939093558a1681522054610e2690826120ce565b60009283526098602090815260408085206001600160a01b038c1686529091529092209190915550600101610d53565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610edc578181015183820152602001610ec4565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610f1b578181015183820152602001610f03565b5050505090500194505050505060405180910390a4610f3e818787878787612128565b505050505050565b6102616020526000908152604090205481565b60608151835114610f9b5760405162461bcd60e51b81526004018080602001828103825260298152602001806156046029913960400191505060405180910390fd5b600083516001600160401b0381118015610fb457600080fd5b50604051908082528060200260200182016040528015610fde578160200160208202803683370190505b50905060005b845181101561103c5761101d858281518110610ffc57fe5b602002602001015185838151811061101057fe5b60200260200101516104c4565b82828151811061102957fe5b6020908102919091010152600101610fe4565b509392505050565b60606001600160a01b038216806110745750506040805180820190915260018152600360fc1b60208201526105e5565b8060005b811561108c57600101600a82049150611078565b6000816001600160401b03811180156110a457600080fd5b506040519080825280601f01601f1916602001820160405280156110cf576020820181803683370190505b50905060001982015b841561111d57600a850660300160f81b828280600190039350815181106110fb57fe5b60200101906001600160f81b031916908160001a905350600a850494506110d8565b5095945050505050565b61112f613fb8565b60008061113e84860186614436565b90925090506001600160a01b038216301461116b5760405162461bcd60e51b81526004016108a290614f19565b60a0810151815160009081526102636020526040812054611191575060208201516111a5565b508151600090815261026360205260409020545b82608001516001600160a01b0316826001600160a01b031614156112bc576000805b8460c001515181101561120a578460c0015181815181106111e457fe5b6020026020010151602001516001600160601b03168201915080806001019150506111c7565b50806127101461122c5760405162461bcd60e51b81526004016108a29061503f565b6040518060c001604052808560000151815260200161125886606001518561239e90919063ffffffff16565b815260200185608001516001600160a01b031681526020018560c001518152602001604051806040016040528060006001600160a01b0316815260200160006001600160601b031681525081526020018560e0015181525095505050505050610530565b61026654608084015160405163700db6a560e11b81526000928392839283926001600160a01b03169163e01b6d4a916112fb918c918b90600401614d18565b60006040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261134f9190810190614b6c565b93509350935093506040518060c001604052808860000151815260200161138389606001518861239e90919063ffffffff16565b815260200188608001516001600160a01b031681526020018481526020016040518060400160405280896001600160a01b03168152602001876001600160601b031681525081526020018281525098505050505050505050610530565b6113e8611ba7565b6001600160a01b0316836001600160a01b0316148061140e575061140e83610473611ba7565b6114495760405162461bcd60e51b815260040180806020018281038252602981526020018061545b6029913960400191505060405180910390fd5b6114548383836123f7565b505050565b611461611ba7565b6001600160a01b03166114726114da565b6001600160a01b0316146114bb576040805162461bcd60e51b815260206004820181905260248201526000805160206155bb833981519152604482015290519081900360640190fd5b6114c56000612665565b565b6102626020526000908152604090205481565b6033546001600160a01b03165b90565b610162805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106f65780601f106106cb576101008083540402835291602001916106f6565b606081901c91602882901c66ffffffffffffff169164ffffffffff1690565b816001600160a01b0316611577611ba7565b6001600160a01b031614156115bd5760405162461bcd60e51b81526004018080602001828103825260298152602001806155db6029913960400191505060405180910390fd5b80609960006115ca611ba7565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561160e611ba7565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6102646020526000908152604090205481565b6102656020526000908152604090205460ff1681565b611685611ba7565b6001600160a01b03166116966114da565b6001600160a01b0316146116df576040805162461bcd60e51b815260206004820181905260248201526000805160206155bb833981519152604482015290519081900360640190fd5b600090815261026560205260409020805460ff19166001179055565b6000828152610265602052604090205460ff1661172a5760405162461bcd60e51b81526004016108a290614eb8565b600080600061173885611546565b9250925092508160001461175e5760405162461bcd60e51b81526004016108a290614f67565b6117698686866126c1565b60005b84811015611824576000868152610264602052604081208054600101908190556117989086908561189c565b600081815261026160205260409020549091506117ba576117ba8160016127e2565b6117d6888260016040518060200160405280600081525061284c565b6001600160a01b03881660006117ea611ba7565b6001600160a01b03166000805160206153c683398151915284600160405161181392919061515b565b60405180910390a45060010161176c565b50505050505050565b61012f805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106f65780601f106106cb576101008083540402835291602001916106f6565b60006118958383612977565b9392505050565b6bffffffffffffffffffffffff19606084901b16602883901b0181019392505050565b6001600160a01b0384166119045760405162461bcd60e51b81526004018080602001828103825260258152602001806154a66025913960400191505060405180910390fd5b61190c611ba7565b6001600160a01b0316856001600160a01b03161480611932575061193285610473611ba7565b61196d5760405162461bcd60e51b815260040180806020018281038252602981526020018061545b6029913960400191505060405180910390fd5b6000611977611ba7565b9050611997818787611988886129a3565b611991886129a3565b87610f3e565b6119de836040518060600160405280602a8152602001615570602a913960008781526098602090815260408083206001600160a01b038d1684529091529020549190612037565b60008581526098602090815260408083206001600160a01b038b81168552925280832093909355871681522054611a1590846120ce565b60008581526098602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616926000805160206153c683398151915292908290030190a4610f3e8187878787876129e8565b611a80611ba7565b6001600160a01b0316611a916114da565b6001600160a01b031614611ada576040805162461bcd60e51b815260206004820181905260248201526000805160206155bb833981519152604482015290519081900360640190fd5b6001600160a01b038116611b1f5760405162461bcd60e51b81526004018080602001828103825260268152602001806154116026913960400191505060405180910390fd5b61066c81612665565b611b30611ba7565b6001600160a01b0316836001600160a01b03161480611b565750611b5683610473611ba7565b611b915760405162461bcd60e51b815260040180806020018281038252602981526020018061545b6029913960400191505060405180910390fd5b6114548383836126c1565b60006105e282612b59565b6000611bb1612b78565b905090565b6001600160a01b0316600090815260ca602052604090205460ff1690565b8051611be790609a906020840190614002565b5050565b4690565b606081611c1457506040805180820190915260018152600360fc1b60208201526105e5565b8160005b8115611c2c57600101600a82049150611c18565b6000816001600160401b0381118015611c4457600080fd5b506040519080825280601f01601f191660200182016040528015611c6f576020820181803683370190505b509050815b8515611cc757600019016000600a8704600a028703603001905060008160f81b905080848481518110611ca357fe5b60200101906001600160f81b031916908160001a905350600a880497505050611c74565b50949350505050565b611ce08360800151610473611ba7565b80611d07575082608001516001600160a01b0316611cfc611ba7565b6001600160a01b0316145b611d235760405162461bcd60e51b81526004016108a290614f41565b6000611d2e84612be0565b610266546080860151604051631e9e7ebd60e31b81529293506000926001600160a01b039092169163f4f3f5e891611d6d913091908790600401614d18565b60206040518083038186803b158015611d8557600080fd5b505afa158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbd9190614884565b905060008311611ddf5760405162461bcd60e51b81526004016108a290614f97565b845160009081526102616020526040902054611e71576000856040015111611e195760405162461bcd60e51b81526004016108a290614eef565b611e2b856000015186604001516127e2565b84608001516001600160a01b0316826001600160a01b03161415611e6557611e60856000015186608001518760e00151612d0a565b611e71565b8451611e719082612dcd565b611e90848660000151856040518060200160405280600081525061284c565b836001600160a01b031685608001516001600160a01b031614611f525760808501516001600160a01b03166000611ec5611ba7565b6001600160a01b03166000805160206153c6833981519152886000015187604051611ef192919061515b565b60405180910390a4836001600160a01b031685608001516001600160a01b0316611f19611ba7565b6001600160a01b03166000805160206153c6833981519152886000015187604051611f4592919061515b565b60405180910390a4610928565b60808501516001600160a01b03166000611f6a611ba7565b6001600160a01b03166000805160206153c6833981519152886000015187604051611f9692919061515b565b60405180910390a45050505050565b6000611fb030612e11565b15905090565b611fbe612e17565b611fc782612ece565b611fcf612f8c565b611fd761303d565b611fdf6130dd565b611ff7604051806020016040528060008152506131ad565b61200084613278565b61200861303d565b61201061332a565b61201a87876133c7565b61202385611bd4565b61202c81613494565b611824836001613551565b600081848411156120c65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561208b578181015183820152602001612073565b50505050905090810190601f1680156120b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611895576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b61213a846001600160a01b0316612e11565b15610f3e57836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156121c85781810151838201526020016121b0565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156122075781810151838201526020016121ef565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561224357818101518382015260200161222b565b50505050905090810190601f1680156122705780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15801561229557600080fd5b505af19250505080156122ba57506040513d60208110156122b557600080fd5b505160015b61234f576122c661529b565b806122d15750612318565b60405162461bcd60e51b815260206004820181815283516024840152835184939192839260440191908501908083836000831561208b578181015183820152602001612073565b60405162461bcd60e51b815260040180806020018281038252603481526020018061536a6034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146118245760405162461bcd60e51b815260040180806020018281038252602881526020018061539e6028913960400191505060405180910390fd5b6000826123ad57506000610530565b828202828482816123ba57fe5b04146118955760405162461bcd60e51b815260040180806020018281038252602181526020018061559a6021913960400191505060405180910390fd5b6001600160a01b03831661243c5760405162461bcd60e51b815260040180806020018281038252602381526020018061554d6023913960400191505060405180910390fd5b805182511461247c5760405162461bcd60e51b815260040180806020018281038252602881526020018061562d6028913960400191505060405180910390fd5b6000612486611ba7565b90506124a681856000868660405180602001604052806000815250610f3e565b60005b83518110156125845761253b8382815181106124c157fe5b602002602001015160405180606001604052806024815260200161543760249139609860008886815181106124f257fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020546120379092919063ffffffff16565b6098600086848151811061254b57fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a1682529092529020556001016124a9565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561260b5781810151838201526020016125f3565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561264a578181015183820152602001612632565b5050505090500194505050505060405180910390a450505050565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166127065760405162461bcd60e51b815260040180806020018281038252602381526020018061554d6023913960400191505060405180910390fd5b6000612710611ba7565b905061274081856000612722876129a3565b61272b876129a3565b60405180602001604052806000815250610f3e565b612787826040518060600160405280602481526020016154376024913960008681526098602090815260408083206001600160a01b038b1684529091529020549190612037565b60008481526098602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616926000805160206153c683398151915292908290030190a450505050565b60008281526102616020526040902054156127fc57600080fd5b6000828152610261602052604090819020829055517f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c90612840908490849061515b565b60405180910390a15050565b600083815261026260205260408120546128679084906120ce565b600085815261026160205260409020549091508111156128995760405162461bcd60e51b81526004016108a290615015565b600084815261026260205260409020546128b49084906120ce565b600085815261026260205260409020556001600160a01b0385166128ea5760405162461bcd60e51b81526004016108a290615076565b60006128f4611ba7565b905061291581600088612906896129a3565b61290f896129a3565b88610f3e565b60008581526098602090815260408083206001600160a01b038a16845290915290205461294290856120ce565b60008681526098602090815260408083206001600160a01b038b168452909152812091909155610f3e908290888888886129e8565b6001600160a01b038116600090815260ca602052604081205460ff1680611895575061189583836135b1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106129d757fe5b602090810291909101015292915050565b6129fa846001600160a01b0316612e11565b15610f3e57836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612a89578181015183820152602001612a71565b50505050905090810190601f168015612ab65780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015612ad957600080fd5b505af1925050508015612afe57506040513d6020811015612af957600080fd5b505160015b612b0a576122c661529b565b6001600160e01b0319811663f23a6e6160e01b146118245760405162461bcd60e51b815260040180806020018281038252602881526020018061539e6028913960400191505060405180910390fd5b6001600160e01b03191660009081526066602052604090205460ff1690565b6065546000906001600160a01b0316331415612bdb57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506114e79050565b503390565b600080826060015111612c055760405162461bcd60e51b81526004016108a290614f97565b8151600090815261026260205260408120546060840151612c25916120ce565b835160009081526102616020526040902054909150158015612c4b575082604001518111155b80612c6757508251600090815261026160205260409020548111155b612c835760405162461bcd60e51b81526004016108a290615015565b6000806000612c958660000151611546565b92509250925085608001516001600160a01b0316836001600160a01b031614612cbd57600080fd5b8115612cdb5760405162461bcd60e51b81526004016108a290614fc1565b6000612ce6876135df565b90506000612cfe8860a00151838a610100015161378f565b98975050505050505050565b7fb4a57a5177dd398695b8483cbd5c22a9f1ed09e165c1a57c76b70c0cbac588088382604051612d3b929190615169565b60405180910390a1816001600160a01b031681600001516001600160a01b0316148015612d7457506001600160a01b038216606084901c145b15612d7e57600081525b600092835261025f602090815260409093208151815492909401516001600160601b0316600160a01b026001600160a01b039485166001600160a01b0319909316929092179093161790915550565b6000828152610260602052604090819020829055517fb6b73c7e31309c97b2102e093dfdb0c84fa139634753408ecec947c998aadd5e90612840908490849061515b565b3b151590565b600054610100900460ff1680612e305750612e30611fa5565b80612e3e575060005460ff16155b612e795760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff16158015612ea4576000805460ff1961ff0019909116610100171660011790555b6000612eae611ba7565b9050612eb981612665565b50801561066c576000805461ff001916905550565b600054610100900460ff1680612ee75750612ee7611fa5565b80612ef5575060005460ff16155b612f305760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff16158015612f5b576000805460ff1961ff0019909116610100171660011790555b61026680546001600160a01b0319166001600160a01b0384161790558015611be7576000805461ff00191690555050565b600054610100900460ff1680612fa55750612fa5611fa5565b80612fb3575060005460ff16155b612fee5760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff16158015613019576000805460ff1961ff0019909116610100171660011790555b6130296301ffc9a760e01b6137a4565b801561066c576000805461ff001916905550565b600054610100900460ff16806130565750613056611fa5565b80613064575060005460ff16155b61309f5760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff16158015613029576000805460ff1961ff001990911661010017166001179055801561066c576000805461ff001916905550565b600054610100900460ff16806130f657506130f6611fa5565b80613104575060005460ff16155b61313f5760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff1615801561316a576000805460ff1961ff0019909116610100171660011790555b613029604051806040016040528060088152602001674d696e743131353560c01b815250604051806040016040528060018152602001603160f81b815250613828565b600054610100900460ff16806131c657506131c6611fa5565b806131d4575060005460ff16155b61320f5760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff1615801561323a576000805460ff1961ff0019909116610100171660011790555b61324382611bd4565b613253636cdb3d1360e11b6137a4565b6132636303a24d0760e21b6137a4565b8015611be7576000805461ff00191690555050565b600054610100900460ff16806132915750613291611fa5565b8061329f575060005460ff16155b6132da5760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff16158015613305576000805460ff1961ff0019909116610100171660011790555b81516133199061012f906020850190614002565b5061326363e8a3d48560e01b6137a4565b600054610100900460ff16806133435750613343611fa5565b80613351575060005460ff16155b61338c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff161580156133b7576000805460ff1961ff0019909116610100171660011790555b61302963656cb66560e11b6137a4565b600054610100900460ff16806133e057506133e0611fa5565b806133ee575060005460ff16155b6134295760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff16158015613454576000805460ff1961ff0019909116610100171660011790555b825161346890610161906020860190614002565b50815161347d90610162906020850190614002565b508015611454576000805461ff0019169055505050565b600054610100900460ff16806134ad57506134ad611fa5565b806134bb575060005460ff16155b6134f65760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff16158015613521576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384161790558015611be7576000805461ff00191690555050565b6001600160a01b038216600081815260ca6020908152604091829020805460ff1916851515908117909155825190815291517f270dbb8ba4292910ae92862466486be25c355c837270a3d8824b36a8bc7c653b9281900390910190a25050565b6001600160a01b03918216600090815260996020908152604080832093909416825291909152205460ff1690565b6000808260c00151516001600160401b03811180156135fd57600080fd5b50604051908082528060200260200182016040528015613627578160200160208202803683370190505b50905060005b8360c00151518110156136795761365a8460c00151828151811061364d57fe5b60200260200101516138ea565b82828151811061366657fe5b602090810291909101015260010161362d565b507f2f97ac60e5eac3c1112cc2c3da83b4d450af805a023157d595dc5c737f0fcd41836000015184602001518560400151866060015187608001518860a001518760405160200180828051906020019060200280838360005b838110156136ea5781810151838201526020016136d2565b50505050905001915050604051602081830303815290604052805190602001206137178b60e001516138ea565b604051602001808a8152602001898152602001888152602001878152602001868152602001856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001995050505050505050505060405160208183030381529060405280519060200120915050919050565b600061379c848484613957565b949350505050565b6001600160e01b03198082161415613803576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152606660205260409020805460ff19166001179055565b600054610100900460ff16806138415750613841611fa5565b8061384f575060005460ff16155b61388a5760405162461bcd60e51b815260040180806020018281038252602e8152602001806154fd602e913960400191505060405180910390fd5b600054610100900460ff161580156138b5576000805460ff1961ff0019909116610100171660011790555b82516020808501919091208351918401919091206101c7919091556101c8558015611454576000805461ff0019169055505050565b8051602091820151604080517f397e04204c1e1a60ee8724b71f8244e10ab5f2e9009854d80f602bda21b59ebb818601526001600160a01b03909316838201526001600160601b039091166060808401919091528151808403909101815260809092019052805191012090565b60008061396384613ba3565b9050600083516041141561397e5761397b8285613bef565b90505b856001600160a01b0316816001600160a01b031614613b9a576139a9866001600160a01b0316612e11565b15613b225760408051630b135d3f60e11b808252600482018581526024830193845287516044840152875191936001600160a01b038b1693631626ba7e9388938b9390929091606490910190602085019080838360005b83811015613a18578181015183820152602001613a00565b50505050905090810190601f168015613a455780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015613a6357600080fd5b505afa158015613a77573d6000803e3d6000fd5b505050506040513d6020811015613a8d57600080fd5b505160408051808201909152601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020820152916001600160e01b031990911614613b1c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561208b578181015183820152602001612073565b50613b9a565b604080518082018252601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020808301918252925162461bcd60e51b8152600481019384528251602482015282519293928392604490920191908083836000831561208b578181015183820152602001612073565b95945050505050565b6000613bad613c6f565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60008151604114613c47576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a613c6586828585613caa565b9695505050505050565b6000611bb17f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613c9d613ef7565b613ca5613efe565b613f05565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613d0b5760405162461bcd60e51b81526004018080602001828103825260228152602001806154846022913960400191505060405180910390fd5b6000601e8560ff161115613de5576004850360ff16601b1480613d3457506004850360ff16601c145b613d6f5760405162461bcd60e51b815260040180806020018281038252602281526020018061552b6022913960400191505060405180910390fd5b6001613d7a87613f67565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613dd4573d6000803e3d6000fd5b505050602060405103519050613e9c565b8460ff16601b1480613dfa57508460ff16601c145b613e355760405162461bcd60e51b815260040180806020018281038252602281526020018061552b6022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613e8f573d6000803e3d6000fd5b5050506020604051035190505b6001600160a01b038116613b9a576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b6101c75490565b6101c85490565b6000838383613f12611beb565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160608152602001613ff061408e565b8152602001613ffd61408e565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282614038576000855561407e565b82601f1061405157805160ff191683800117855561407e565b8280016001018555821561407e579182015b8281111561407e578251825591602001919060010190614063565b5061408a9291506140a5565b5090565b604080518082019091526000808252602082015290565b5b8082111561408a57600081556001016140a6565b80356105e58161533f565b80516105e58161533f565b600082601f8301126140e0578081fd5b813560206140f56140f0836151a0565b61517d565b82815281810190858301604080860288018501891015614113578687fd5b865b86811015614139576141278a8461436f565b85529385019391810191600101614115565b509198975050505050505050565b600082601f830112614157578081fd5b815160206141676140f0836151a0565b82815281810190858301604080860288018501891015614185578687fd5b865b86811015614139576141998a846143ca565b85529385019391810191600101614187565b600082601f8301126141bb578081fd5b813560206141cb6140f0836151a0565b82815281810190858301838502870184018810156141e7578586fd5b855b85811015614205578135845292840192908401906001016141e9565b5090979650505050505050565b600082601f830112614222578081fd5b81356142306140f0826151bd565b818152846020838601011115614244578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261426e578081fd5b815161427c6140f0826151bd565b818152846020838601011115614290578283fd5b61379c826020830160208701615269565b600061014082840312156142b3578081fd5b6101206142bf8161517d565b9150823582526020830135602083015260408301356040830152606083013560608301526142ef608084016140ba565b608083015261430060a084016140ba565b60a083015260c08301356001600160401b038082111561431f57600080fd5b61432b868387016140d0565b60c085015261433d8660e0870161436f565b60e085015291840135918083111561435457600080fd5b505061436284828501614212565b6101008301525092915050565b600060408284031215614380578081fd5b604051604081018181106001600160401b038211171561439c57fe5b60405290508082356143ad8161533f565b815260208301356143bd81615354565b6020919091015292915050565b6000604082840312156143db578081fd5b604051604081018181106001600160401b03821117156143f757fe5b8060405250809150825161440a8161533f565b815260208301516143bd81615354565b60006020828403121561442b578081fd5b81356118958161533f565b60008060408385031215614448578081fd5b82356144538161533f565b915060208301356001600160401b0381111561446d578182fd5b614479858286016142a1565b9150509250929050565b60008060408385031215614495578182fd5b82516144a08161533f565b60208401519092506001600160401b03808211156144bc578283fd5b9084019061014082870312156144d0578283fd5b6101206144dc8161517d565b8351815260208401516020820152604084015160408201526060840151606082015261450a608085016140c5565b608082015261451b60a085016140c5565b60a082015260c084015183811115614531578586fd5b61453d89828701614147565b60c0830152506145508860e086016143ca565b60e0820152908301519082821115614566578485fd5b6145728883860161425e565b610100820152809450505050509250929050565b60008060408385031215614598578182fd5b82356145a38161533f565b915060208301356145b38161533f565b809150509250929050565b600080600080600060a086880312156145d5578081fd5b85356145e08161533f565b945060208601356145f08161533f565b935060408601356001600160401b038082111561460b578283fd5b61461789838a016141ab565b9450606088013591508082111561462c578283fd5b61463889838a016141ab565b9350608088013591508082111561464d578283fd5b5061465a88828901614212565b9150509295509295909350565b600080600080600060a0868803121561467e578283fd5b85356146898161533f565b945060208601356146998161533f565b9350604086013592506060860135915060808601356001600160401b038111156146c1578182fd5b61465a88828901614212565b6000806000606084860312156146e1578081fd5b83356146ec8161533f565b925060208401356001600160401b0380821115614707578283fd5b614713878388016141ab565b93506040860135915080821115614728578283fd5b50614735868287016141ab565b9150509250925092565b60008060408385031215614751578182fd5b823561475c8161533f565b9150602083013580151581146145b3578182fd5b60008060408385031215614782578182fd5b823561478d8161533f565b946020939093013593505050565b6000806000606084860312156147af578081fd5b83356147ba8161533f565b95602085013595506040909401359392505050565b600080604083850312156147e1578182fd5b82356001600160401b03808211156147f7578384fd5b818501915085601f83011261480a578384fd5b8135602061481a6140f0836151a0565b82815281810190858301838502870184018b1015614836578889fd5b8896505b8487101561486157803561484d8161533f565b83526001969096019591830191830161483a565b5096505086013592505080821115614877578283fd5b50614479858286016141ab565b600060208284031215614895578081fd5b5051919050565b6000602082840312156148ad578081fd5b81356001600160e01b031981168114611895578182fd5b600080602083850312156148d6578182fd5b82356001600160401b03808211156148ec578384fd5b818501915085601f8301126148ff578384fd5b81358181111561490d578485fd5b86602082850101111561491e578485fd5b60209290920196919550909350505050565b60008060408385031215614942578182fd5b82356001600160401b03811115614957578283fd5b61496385828601614212565b92505060208301356145b38161533f565b600060208284031215614985578081fd5b81356001600160401b0381111561499a578182fd5b61379c84828501614212565b600080600080600080600060e0888a0312156149c0578485fd5b87356001600160401b03808211156149d6578687fd5b6149e28b838c01614212565b985060208a01359150808211156149f7578687fd5b614a038b838c01614212565b975060408a0135915080821115614a18578687fd5b614a248b838c01614212565b965060608a0135915080821115614a39578384fd5b50614a468a828b01614212565b945050614a55608089016140ba565b9250614a6360a089016140ba565b9150614a7160c089016140ba565b905092959891949750929550565b600060208284031215614a90578081fd5b81356001600160401b03811115614aa5578182fd5b82016101408185031215611895578182fd5b600080600060608486031215614acb578081fd5b83356001600160401b03811115614ae0578182fd5b614aec868287016142a1565b9350506020840135614afd8161533f565b91506040840135614b0d8161533f565b809150509250925092565b600060408284031215614b29578081fd5b61189583836143ca565b600060208284031215614b44578081fd5b5035919050565b60008060408385031215614b5d578182fd5b50508035926020909101359150565b60008060008060a08587031215614b81578182fd5b8451614b8c81615354565b60208601519094506001600160401b03811115614ba7578283fd5b614bb387828801614147565b93505060408501519150614bca86606087016143ca565b905092959194509250565b6001600160a01b03169052565b600082845260208401935081815b84811015614c1557614c028683614c75565b6040958601959190910190600101614bf0565b5093949350505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452614c61816020860160208601615269565b601f01601f19169290920160200192915050565b8035614c808161533f565b6001600160a01b031682526020810135614c9981615354565b6001600160601b0381166020840152505050565b80516001600160a01b031682526020908101516001600160601b0316910152565b6001600160a01b0391909116815260200190565b6001600160a01b0384168152606060208201819052600090614d0690830185614c49565b8281036040840152613c658185614c49565b6001600160a01b0393841681529183166020830152909116604082015260600190565b600060018060a01b038416825260406020830152823560408301526020830135606083015260408301356080830152606083013560a0830152614d80608084016140ba565b614d8d60c0840182614bd5565b50614d9a60a084016140ba565b614da760e0840182614bd5565b50614db560c08401846151de565b610140610100850152614dcd61018085018284614be2565b915050610120614de281850160e08701614c75565b614dee81860186615225565b858403603f19016101608701529150614e08838383614c1f565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015614e8557835183529284019291840191600101614e69565b50909695505050505050565b901515815260200190565b90815260200190565b6000602082526118956020830184614c49565b60208082526019908201527f4e6f7420726561647920746f20626520636f6e76657274656400000000000000604082015260600190565b60208082526010908201526f1cdd5c1c1b1e481a5b98dbdc9c9958dd60821b604082015260600190565b6020808252600e908201526d15dc9bdb99c818dbdb9d1c9858dd60921b604082015260600190565b6020808252600c908201526b139bdd08185c1c1c9bdd995960a21b604082015260600190565b60208082526016908201527543616e206f6e6c79206275726e2066756e6769626c6560501b604082015260600190565b60208082526010908201526f185b5bdd5b9d081a5b98dbdc9c9958dd60821b604082015260600190565b602080825260119082015270546f6b656e2069642069732077726f6e6760781b604082015260600190565b6020808252600f908201526e57726f6e6720636f6e74726163747360881b604082015260600190565b60208082526010908201526f6d6f7265207468616e20737570706c7960801b604082015260600190565b60208082526017908201527f5061796f7574732073686f756c64206265203130303030000000000000000000604082015260600190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b602080825282518282015282810151604080840191909152808401516001600160a01b0316606080850191909152840151610100608085015280516101208501819052600093929183019184916101408701905b808410156151325761511e828651614cad565b93850193600193909301929082019061510b565b506080880151945061514760a0880186614cad565b60a08801519450614e0860e0880186614cad565b918252602082015260400190565b828152606081016118956020830184614cad565b6040518181016001600160401b038111828210171561519857fe5b604052919050565b60006001600160401b038211156151b357fe5b5060209081020190565b60006001600160401b038211156151d057fe5b50601f01601f191660200190565b6000808335601e198436030181126151f4578283fd5b83016020810192503590506001600160401b0381111561521357600080fd5b604081023603831315610c4157600080fd5b6000808335601e1984360301811261523b578283fd5b83016020810192503590506001600160401b0381111561525a57600080fd5b803603831315610c4157600080fd5b60005b8381101561528457818101518382015260200161526c565b838111156108ba5750506000910152565b60e01c90565b600060443d10156152ab576114e7565b600481823e6308c379a06152bf8251615295565b146152c9576114e7565b6040513d600319016004823e80513d6001600160401b0381602484011181841117156152f857505050506114e7565b8284019250825191508082111561531257505050506114e7565b503d8301602082840101111561532a575050506114e7565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461066c57600080fd5b6001600160601b038116811461066c57600080fdfe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62455243313135353a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656445434453413a20696e76616c6964207369676e6174757265202773272076616c7565455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368a2646970667358221220b97660f52cf779b280403ac441a27c45788607eadea7b8e66eca84c222a3497164736f6c63430007060033","deployedBytecode":"","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"string","name":"symbol","type":"string"}],"name":"CreateERC1155GlipPass","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"indexed":false,"internalType":"struct LibPart.Part[]","name":"creators","type":"tuple[]"}],"name":"Creators","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"hasApproval","type":"bool"}],"name":"DefaultApproval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"wallet","type":"address"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"indexed":false,"internalType":"struct LibPart.Part[]","name":"royalties","type":"tuple[]"}],"name":"RoyaltiesSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"indexed":false,"internalType":"struct LibPart.Part","name":"royalty","type":"tuple"}],"name":"SaveCreatorSignedRoyalty","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"royaltySplitterBytes","type":"bytes32"}],"name":"SaveRoyaltySplitter","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Supply","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"string","name":"baseURI","type":"string"},{"internalType":"string","name":"contractURI","type":"string"},{"internalType":"address","name":"exchangeProxy","type":"address"},{"internalType":"address","name":"defaultMinter","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"__ERC1155GlipPass_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"addressToString","outputs":[{"internalType":"string","name":"_uintAsString","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"allowConversion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"nonFungibleId","type":"uint256"},{"internalType":"uint256","name":"fungibleId","type":"uint256"}],"name":"composeTokenId","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"contractURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"convertPass","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"convertable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeLazyMintData","outputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"reserve","type":"uint256"},{"internalType":"address","name":"creator","type":"address"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"payouts","type":"tuple[]"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part","name":"minter","type":"tuple"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part","name":"royalty","type":"tuple"}],"internalType":"struct IGlipERC721LazyData.DecodedMintData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"decomposeTokenId","outputs":[{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"nonFungibleId","type":"uint256"},{"internalType":"uint256","name":"fungibleId","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"reserve","type":"uint256"},{"internalType":"uint256","name":"supply","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"creator","type":"address"},{"internalType":"address payable","name":"minter","type":"address"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"creators","type":"tuple[]"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part","name":"royalty","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct LibERC1155LazyMint.Mint1155Data","name":"data","type":"tuple"}],"name":"encodeLazyMintData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"},{"internalType":"address","name":"to","type":"address"}],"name":"mintAndTransferEncodedData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"minted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_salePrice","type":"uint256"}],"name":"royaltyInfo","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"newuri","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"supply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"reserve","type":"uint256"},{"internalType":"uint256","name":"supply","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"creator","type":"address"},{"internalType":"address payable","name":"minter","type":"address"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part[]","name":"creators","type":"tuple[]"},{"components":[{"internalType":"address payable","name":"account","type":"address"},{"internalType":"uint96","name":"value","type":"uint96"}],"internalType":"struct LibPart.Part","name":"royalty","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct LibERC1155LazyMint.Mint1155Data","name":"data","type":"tuple"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"}],"name":"transferFromOrMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"updateForwarder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]}