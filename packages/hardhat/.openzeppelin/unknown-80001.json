{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x3bcFe1582f44bbEf22b9A25D22feF254280C94B4",
    "txHash": "0x7e49f54e8e29664520571190fb706574d971842c6c602cc0864ca2bc871a9197",
    "deployTransaction": {
      "hash": "0x7e49f54e8e29664520571190fb706574d971842c6c602cc0864ca2bc871a9197",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x4B8D48E4da10FF659d109640b0E59c5560435585",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x4190ab00"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 1,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x438c62f2a6212b6fd8c01ace7f5ecbd7229e97f0764764a36c1410506305844d",
      "s": "0x5657f382518ea5ddbb81292f97f011b7323a51c05d73a8bb5310bc6b3e629b32",
      "v": 160037,
      "creates": "0x3bcFe1582f44bbEf22b9A25D22feF254280C94B4",
      "chainId": 80001
    }
  },
  "proxies": [
    {
      "address": "0xeD8798804E4dC0405306Af2e780e1ba89543474b",
      "txHash": "0xb310048fa3b2cd8c733958335e97730448a67d9030f54a69cb004dfd748ca35c",
      "kind": "transparent"
    },
    {
      "address": "0x8e8fFDE8A2EdAF197D0D5510Df68d785dFC153b5",
      "txHash": "0x488c58458d942c226712e7304959683298f9aa14329188f8220f2b2d225c11d8",
      "kind": "transparent"
    },
    {
      "address": "0x0738Af5a0e85196f3c16A11741265Be39C714290",
      "txHash": "0x31d518e746b4a578384d386573d6391d2def76122851e9e19b3117912f007604",
      "kind": "transparent"
    },
    {
      "address": "0xE3CBbB30773E165C9a44Ce714992C58E762cBEB5",
      "txHash": "0x76c89d8ef0a96054eec59d2fa6aec448c612218a10afd800b703a4b7896befa7",
      "kind": "beacon"
    },
    {
      "address": "0xBe63Fd5f372271B3e5BfDCc0BfC04ED519AAC66f",
      "txHash": "0x61b5ac1665d8786901b95a2d97e48c1adcf8c8d1f5fe06690f3a7356f1b69c0b",
      "kind": "beacon"
    },
    {
      "address": "0xaFfE3983FC6A6e0A23c5779351992D667048C827",
      "txHash": "0xc8bca9d0dea4310eebf54dac2942e37f1784901dec863525d233d0a505b00149",
      "kind": "transparent"
    },
    {
      "address": "0xBdf14186BB7C7F2977226b3fc9058433C511dfF5",
      "txHash": "0xfbffe772a1ca6982c3e775c7c0c16e2732c17aab77265b070cf8c0d325672b0f",
      "kind": "transparent"
    },
    {
      "address": "0x304BfBDf9DDc090eE68D6B8A6c01bc3A46BCbA3c",
      "txHash": "0xc75758bcb7aeb0615c6815f106fff640735a51e71574f0ebf650f2d695877b55",
      "kind": "transparent"
    },
    {
      "address": "0xe8Eb78bA59A52d498403D614379d56B331c3A099",
      "txHash": "0xb19ed9b59f8bec2cc7176294e06e4716f506b1c1b23f999ad09286275d11e4d0",
      "kind": "beacon"
    },
    {
      "address": "0x5030A19FA7F26046d74E89b56e33d2D719d7fF0c",
      "txHash": "0xa4bc3d1638b03ea1b0eb77190f85ff96ea94c450e192fea6ba1a31c255c728c7",
      "kind": "beacon"
    },
    {
      "address": "0xc85D38a343B2FA0117Cec76050a2E92977185DB2",
      "txHash": "0x8303024bff223b8095e80111fbe01bef8f9acb11dd098fa1c3ba69d2fa9f01e8",
      "kind": "beacon"
    },
    {
      "address": "0xd9478Daeabcb8628212F95FE295FF6D85D7E9D14",
      "txHash": "0xcaae82e679b9d99e43bcef596df9ba8e8cd3ab2e0d6495d4fe3d06c6009b7338",
      "kind": "beacon"
    },
    {
      "address": "0xc054f3B17C51b26378F8F948786A600D28bb66db",
      "txHash": "0x904e2acf76c6fa945fbd0a6cc5d26bcf5e91dc86944b86e7cc024afbf4ad2ba2",
      "kind": "beacon"
    },
    {
      "address": "0x7EC2d2076C97a1687072E808D8Edfe7A98d431f8",
      "txHash": "0xe732b6d9696b64076ca074d428af3118e40dc5e2a54647ba96353faef466d057",
      "kind": "beacon"
    },
    {
      "address": "0xB323d9a429344D920167780623a011bE204C2a3E",
      "txHash": "0x4087e94f07dabbb81062b0625071c4521230fa7d7c0e486d3b24f4a0507447ca",
      "kind": "beacon"
    },
    {
      "address": "0xCaa08a43591699BA65A3872A7459eA2DB8CfDd40",
      "txHash": "0xc380675906483db232849c7e5e6b2a5b688e0d766c369f2baf33928de683d95f",
      "kind": "beacon"
    },
    {
      "address": "0x3b86a43356f59E7F008c34dCe951e598f0E16837",
      "txHash": "0x1db3ad1fe82c73ab854e2a6788ae414031b72dabafbd3373703d1e09a0daf6fa",
      "kind": "beacon"
    },
    {
      "address": "0x91edaEb9239c2F6c24DE3B1993758654071bb94e",
      "txHash": "0x83b9873762d72b6b03ebe2a8d2d4d16af6b567687a79453028479830a0a3a213",
      "kind": "beacon"
    },
    {
      "address": "0x6272FBD5317B3966f6666109B84171930F78d499",
      "txHash": "0xcc7b2cb7f6ed7273d188228f3a99bbbd99a44ca205f47b6ad28d3e5d97b2b653",
      "kind": "beacon"
    },
    {
      "address": "0x6CD0395c40B899B84ae2F8ab91a19ef79d2ea75D",
      "txHash": "0x705212298094cb482a85ea6fe5ed8b8a5ad79d28608dc02ac5b1a574495843fd",
      "kind": "beacon"
    },
    {
      "address": "0xE9d9acEC902A09D58dB6DE8cc272C298E0473466",
      "txHash": "0x99d1e3fbbb8979c682711350068c5d4b61db19a25d5143d37458511ae7efe51f",
      "kind": "beacon"
    },
    {
      "address": "0xf510781EBf0BC538129dEb0049705653e5237641",
      "txHash": "0x5b09229f277b59d0c8770166433b1618e95b157377170700cd99efe69b500e51",
      "kind": "beacon"
    },
    {
      "address": "0x784129E7064e7188A011da4eF37e90d540545920",
      "txHash": "0x42141046a92ac52b54e304634c1423739bc114c41ca5f6f52c6b9db804ff00a2",
      "kind": "beacon"
    },
    {
      "address": "0x15a13af4D6e5a7E4624eb4c197ab38F66a08ab16",
      "txHash": "0x11997aa8990de499cbce240e030f0f1d152bf63734b2f3680fb38be3e9efda68",
      "kind": "beacon"
    },
    {
      "address": "0x9035c8775596285AC8f781a9ca99b1915A624C8D",
      "txHash": "0xab78b3c5eb039c745663e3482986d01b67dca2517d8e8219a62be6b8c7e7f572",
      "kind": "beacon"
    },
    {
      "address": "0xcF255E9Fd288077948dD0D721539f27F8105B026",
      "txHash": "0xa8b4ead62475707ef1b2b85614e0386d1965dbb483b172507e86d6e29c36e661",
      "kind": "beacon"
    },
    {
      "address": "0x06A2d311B3f3dEd3D51429A0333992ecf4bA8e39",
      "txHash": "0x349839a766341123d7f6f64446d046e627061b6285192419a0b5bd2cef26c059",
      "kind": "transparent"
    },
    {
      "address": "0xD22E33BCfa7d3A5235D59fE69dcb29d5bcFCCb10",
      "txHash": "0x66559a55f32db0e2ed8fcc764a5d0c6a5c8aadf89f5b9b2ae8cb68c3e9f3a669",
      "kind": "beacon"
    },
    {
      "address": "0xC272cB7ac9bcfB548B251a4F16fa0E4899d891aE",
      "txHash": "0x456a7c7e10832063d9c1968002c28c40f855a947ec716e872de9c8f1feb7eaa6",
      "kind": "transparent"
    },
    {
      "address": "0x1dd581650C2769280A983a32B81be42d953F3E62",
      "txHash": "0xfa29c20ca77a671a8f48de27f7f2b4f55cccdd853b6c9be504ce242ecc6a34c8",
      "kind": "beacon"
    },
    {
      "address": "0xb417168773E1b0979506D70db4f55df2c17feD12",
      "txHash": "0x97d2c41a97abcdf3c9e84e2893ec2bbfc13316d5e7c0b9f19c18c200524c00d8",
      "kind": "beacon"
    },
    {
      "address": "0x198db3b0D40Ee4C7281E6cE6770BEB8c6e030bc9",
      "txHash": "0x52b5525d286261050618b1d1bb73adbb123cbe09f9cf34522f2cf0fba5d8f360",
      "kind": "transparent"
    },
    {
      "address": "0x14A0A9D86ef60146d0492134a760bBd4E85bCa66",
      "txHash": "0x3f992dfc0e469a4378000e48e8fed0a96676d11c35ecc1d02936789dc3709b06",
      "kind": "beacon"
    },
    {
      "address": "0x1221119e18708390C3C75A407dacD511c97B6701",
      "txHash": "0xd9a3fe4b710f67db943734cc471d04b24dd26417854e5d9a819966c23e2b84a9",
      "kind": "beacon"
    },
    {
      "address": "0x68279A13Af8De33A52e7eFD06aEc950a19ccf807",
      "txHash": "0x147be79ad4079ced5ccf51e394c280d111ef30e0e889f69689ff9a898944e20f",
      "kind": "transparent"
    },
    {
      "address": "0x2Ae0448AE651306FbcF0BC6e554E2fee89A83C0a",
      "txHash": "0x2dded07721f2b0fed3399970b183c3c9dfd2abda365d9586e7b4fa8e2dae7c98",
      "kind": "beacon"
    },
    {
      "address": "0x40a47e3fbbCb5015d3D37A61FdCe3efcF5058C80",
      "txHash": "0x77c654bf8cdaa2936a9d84ca9a6fe1937843419fb0b01c941726965d3160aaa5",
      "kind": "beacon"
    },
    {
      "address": "0xBFA90E963930EDFE3e838f186bcBd7588760686d",
      "txHash": "0xfe8dae8563250404acb2ddfb27397ff369142e9acf121368dc3ea03e605e6ac1",
      "kind": "transparent"
    },
    {
      "address": "0x6014E90aC7D78Db3c0F1cE885eA11e3e08e68C1C",
      "txHash": "0x52ce9d76de2583e4a0ee1fc972eff924b501b376a8e47b3e13cf29b4ea6a7dd3",
      "kind": "beacon"
    },
    {
      "address": "0x3CC69aA390dDEb6fd91AD1790cC7d59129167D9E",
      "txHash": "0x52b9822496e845850c8863bc5634caed2f62869ae68c565e195531a9eb52f68c",
      "kind": "beacon"
    }
  ],
  "impls": {
    "74a75524ddce17b33abe6423917fe2f9995c9f015e5fefd0fca3de8689799d1b": {
      "address": "0x24e4E88aCBE8bffE2ad2a02f717b6ea40D781EB2",
      "txHash": "0xf105ab4e08f7eff51179dfa122fee3353688e212f87d8d96e183b95b5c872118",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "AuctionValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionValidator.sol:15"
          },
          {
            "contract": "Auction",
            "label": "stake",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/exchange/Auction.sol:34"
          },
          {
            "contract": "Auction",
            "label": "auctioneer",
            "type": "t_address",
            "src": "contracts/exchange/Auction.sol:36"
          },
          {
            "contract": "Auction",
            "label": "platformFee",
            "type": "t_uint96",
            "src": "contracts/exchange/Auction.sol:37"
          },
          {
            "contract": "Auction",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/Auction.sol:312"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "38197872d43a782471b90f4fde95f964b1b9fd3ca824bd720e27d91b701cf6ae": {
      "address": "0x5b83e9C36D2dF42D4B5500765236C7C9F124b8AF",
      "txHash": "0x05a0be13fccf81c5af8279f4e67418effb6883aaffe4a0af1dbe8da53df3d377",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "RolesValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/roles/RolesValidator.sol:15"
          },
          {
            "contract": "AuctioneerUpgradable",
            "label": "defaults",
            "type": "t_mapping(t_address,t_struct(Auctioneer)81_storage)",
            "src": "contracts/roles/AuctioneerUpgradable.sol:37"
          },
          {
            "contract": "AuctioneerUpgradable",
            "label": "auctioneers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_struct(Auctioneer)81_storage)))",
            "src": "contracts/roles/AuctioneerUpgradable.sol:40"
          },
          {
            "contract": "AuctioneerUpgradable",
            "label": "registrationFee",
            "type": "t_uint256",
            "src": "contracts/roles/AuctioneerUpgradable.sol:43"
          },
          {
            "contract": "AuctioneerUpgradable",
            "label": "registered",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/roles/AuctioneerUpgradable.sol:46"
          },
          {
            "contract": "AuctioneerUpgradable",
            "label": "banned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/roles/AuctioneerUpgradable.sol:47"
          },
          {
            "contract": "AuctioneerUpgradable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/roles/AuctioneerUpgradable.sol:181"
          }
        ],
        "types": {
          "t_mapping(t_address,t_struct(Auctioneer)81_storage)": {
            "label": "mapping(address => struct AuctioneerUpgradable.Auctioneer)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Auctioneer)81_storage": {
            "label": "struct AuctioneerUpgradable.Auctioneer",
            "members": [
              {
                "label": "active",
                "type": "t_bool"
              },
              {
                "label": "auctionType",
                "type": "t_uint8"
              },
              {
                "label": "fee",
                "type": "t_uint96"
              },
              {
                "label": "cancelValue",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "end",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_struct(Auctioneer)81_storage)))": {
            "label": "mapping(address => mapping(address => mapping(address => struct AuctioneerUpgradable.Auctioneer)))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Auctioneer)81_storage))": {
            "label": "mapping(address => mapping(address => struct AuctioneerUpgradable.Auctioneer))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "0a24d2564c7a4d13f453a10cea818efac34d0ca9464fbb6911252e366f394684": {
      "address": "0x39Cf25b1C8D810a786fd31Fec89263bDbCaf2397",
      "txHash": "0xf7a9f409a8b53ba01a02f00ceb44f46774c4cc3949f8cb0252aced78b53792ce",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "RolesValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/roles/RolesValidator.sol:15"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "stake",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/roles/MinterUpgradeable.sol:50"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "defaults",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/roles/MinterUpgradeable.sol:55"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "minters",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
            "src": "contracts/roles/MinterUpgradeable.sol:57"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "defaultsRegistry",
            "type": "t_array(t_struct(DefaultMinter)341_storage)dyn_storage",
            "src": "contracts/roles/MinterUpgradeable.sol:60"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "mintersRegistry",
            "type": "t_array(t_struct(Minter)330_storage)dyn_storage",
            "src": "contracts/roles/MinterUpgradeable.sol:61"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "splitterImplementationContract",
            "type": "t_address",
            "src": "contracts/roles/MinterUpgradeable.sol:64"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "splitters",
            "type": "t_mapping(t_bytes32,t_struct(Part)2934_storage)",
            "src": "contracts/roles/MinterUpgradeable.sol:65"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "withdrawSplits",
            "type": "t_mapping(t_address,t_array(t_struct(Part)2934_storage)dyn_storage)",
            "src": "contracts/roles/MinterUpgradeable.sol:68"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "depositBPS",
            "type": "t_mapping(t_address,t_uint96)",
            "src": "contracts/roles/MinterUpgradeable.sol:70"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "defaultPayoutMapping",
            "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(Part)2934_storage)dyn_storage))",
            "src": "contracts/roles/MinterUpgradeable.sol:73"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "defaultRoyaltySplittersMapping",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bytes32))",
            "src": "contracts/roles/MinterUpgradeable.sol:74"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "minDefaultMinterRoyalty",
            "type": "t_uint96",
            "src": "contracts/roles/MinterUpgradeable.sol:77"
          },
          {
            "contract": "MinterUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/roles/MinterUpgradeable.sol:406"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(address => mapping(address => uint256)))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_struct(DefaultMinter)341_storage)dyn_storage": {
            "label": "struct MinterUpgradeable.DefaultMinter[]"
          },
          "t_struct(DefaultMinter)341_storage": {
            "label": "struct MinterUpgradeable.DefaultMinter",
            "members": [
              {
                "label": "active",
                "type": "t_bool"
              },
              {
                "label": "fee",
                "type": "t_uint96"
              },
              {
                "label": "cancelValue",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "end",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_array(t_struct(Minter)330_storage)dyn_storage": {
            "label": "struct MinterUpgradeable.Minter[]"
          },
          "t_struct(Minter)330_storage": {
            "label": "struct MinterUpgradeable.Minter",
            "members": [
              {
                "label": "active",
                "type": "t_bool"
              },
              {
                "label": "fee",
                "type": "t_uint96"
              },
              {
                "label": "cancelValue",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "end",
                "type": "t_uint256"
              },
              {
                "label": "creators",
                "type": "t_array(t_struct(Part)2934_storage)dyn_storage"
              },
              {
                "label": "royalties",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_struct(Part)2934_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)2934_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_mapping(t_bytes32,t_struct(Part)2934_storage)": {
            "label": "mapping(bytes32 => struct LibPart.Part)"
          },
          "t_mapping(t_address,t_array(t_struct(Part)2934_storage)dyn_storage)": {
            "label": "mapping(address => struct LibPart.Part[])"
          },
          "t_mapping(t_address,t_uint96)": {
            "label": "mapping(address => uint96)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(Part)2934_storage)dyn_storage))": {
            "label": "mapping(address => mapping(address => struct LibPart.Part[]))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bytes32))": {
            "label": "mapping(address => mapping(address => bytes32))"
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "ba78f47b7e907d162275c528bfbd18c766de98b8a40e7883ab904d19d255161c": {
      "address": "0xb17846f906Fc04287256fd37dF4d1D58f6E09673",
      "txHash": "0xb11de0180b4a683eb670ce9bb78e729caca6a1df75b9b14fc5c4c50d4d4506cd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)2293_storage)",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)1670_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:38"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:44"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:47"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:50"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:53"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:56"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:93"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:495"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "_auctionContract",
            "type": "t_address",
            "src": "contracts/tokens/erc-721/ERC721DefaultApproval.sol:9"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-721/ERC721DefaultApproval.sol:10"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721DefaultApproval.sol:38"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721Base.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)3511_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC721Lazy",
            "label": "global",
            "type": "t_bool",
            "src": "contracts/tokens/erc-721/ERC721Lazy.sol:35"
          },
          {
            "contract": "ERC721Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-721/ERC721Lazy.sol:36"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721Lazy.sol:226"
          },
          {
            "contract": "ERC721GlipLive",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721GlipLive.sol:38"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Part)3511_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)3511_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(UintSet)2293_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)2293_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)1907_storage"
              }
            ]
          },
          "t_struct(Set)1907_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)1670_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)1352_storage"
              }
            ]
          },
          "t_struct(Map)1352_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)1344_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)1344_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)1344_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "054ec014c86b360c72a310353f2f01b6415c974cfc9e59431f89d47f62ed5128": {
      "address": "0xb300EF232F25c5E97f64C9B3cF1C76c8ba8FCA8A",
      "txHash": "0x291a4a20e43ad9dda71c18179d10e0b23fe2f0c4379b282f43b43d90b3b5bc63",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)2293_storage)",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)1670_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:38"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:44"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:47"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:50"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:53"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:56"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:93"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "contracts/tokens/erc-721/ERC721Upgradeable.sol:495"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "_auctionContract",
            "type": "t_address",
            "src": "contracts/tokens/erc-721/ERC721DefaultApproval.sol:9"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-721/ERC721DefaultApproval.sol:10"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721DefaultApproval.sol:38"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721Base.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)3511_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC721Lazy",
            "label": "global",
            "type": "t_bool",
            "src": "contracts/tokens/erc-721/ERC721Lazy.sol:35"
          },
          {
            "contract": "ERC721Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-721/ERC721Lazy.sol:36"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721Lazy.sol:226"
          },
          {
            "contract": "ERC721GlipLive",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-721/ERC721GlipLive.sol:38"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Part)3511_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)3511_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_struct(UintSet)2293_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)2293_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)1907_storage"
              }
            ]
          },
          "t_struct(Set)1907_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)1670_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)1352_storage"
              }
            ]
          },
          "t_struct(Map)1352_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)1344_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)1344_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)1344_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "ffe21543a08ee255a4de71586b5b4eb810e17d6288d22c7ac85344430e9ce4db": {
      "address": "0xF50753e9743fCc6e58836F171E63Cd2b457eCdC5",
      "txHash": "0xb85272308371a528cc875d2a3362cf5088292aff195522f83b42b42e62b1010f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:36"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:37"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:38"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:39"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:40"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:330"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "5d45df6445f3c05d88850e5b843382727a60baaaeebeeaf9ec4fdd26cd0c12ba": {
      "address": "0x4D7d215395b88738812b6201Eb5069b065b7CF53",
      "txHash": "0xc85db6d915c39abf9b38b68c3cef39072d78ae53bdbe258c8f13e6212211f8e7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:36"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:37"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:38"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:39"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:40"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:330"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "0cf0587216830cefad9cde486559fbc18f12dab419edb6e4c262d5736de6f05b": {
      "address": "0x5E6098253e2A7B6C9F49Ac79fc76Ddb4783083Df",
      "txHash": "0xb97487035e9907493fe92c25c4372e0f9b2efaf49610f7f554efd35c28a69316",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:36"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:37"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:38"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:39"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:40"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:330"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "c2d724a46016eb420998046d165e0b6fc55db489d1a3a1d8632e5798abd28a33": {
      "address": "0x63B9C8A323F164207bEE3D0e2dCd5158018EBfb7",
      "txHash": "0x76a906a389bfb54cca6942350b6f53a383318f83936b8ccf584aa74beb5907e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:36"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:37"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:38"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:39"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:40"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:330"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "64b5dd3ff3d763661e2b07a447db98c7f8ba89e1a33b66dfacd777f1864e6854": {
      "address": "0x59975BEDF818809D1f516a07ac0A0ad6e4b09474",
      "txHash": "0xea7e10bf2e298dc2a48e51edfae1b35c8754505cec6ed35f57811d5d4f26a86f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:359"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "69829c4531ba79d33fddecce02a17d317120fc9092e68c313ce4817db21dfd21": {
      "address": "0x6CD726Cf6A80D6534375076F7FF4843A2ac9030D",
      "txHash": "0x621d608c6ac52a7171281e0f207ba652c110d6c2bf2bd85b7f3455adf7be8001",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:361"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "bc6f2f3b8abe4cab19044965ca276dad97576dfcff986817ef252fac6089426d": {
      "address": "0x4B18b8F93877ac9Fc55792849218A02483e19752",
      "txHash": "0x39bf279c5f66a777fd300d16a9240a700a6632fb9e473156b30d409721321e2f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:361"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "aec91a8ae1c42e2fba950e2c2be27495ae9c5adc1c31d3b07056de1ed76d66cb": {
      "address": "0x2F637DF8dF6C38995f84A2208944680aEC5FFbb8",
      "txHash": "0xc4468bdc0c22fad74e62adc5d52171a228913aa06658c324ef2673d4928b7a8e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:429"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:361"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "e560c4429e6841d7f7371e69ca76af63a9c92d4c3c183250b543c3cc49b31949": {
      "address": "0x4e17a6200Fc1D734C3598B2e9D095e51F2dDA77e",
      "txHash": "0xc78e5e5497d64ac9f5c2871d1aa234eb06fb14c028f316ca840f67928403f530",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:451"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:361"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "45fca9f9533a8bbd2c18f3eb5d5bb6a51f0db24d2a67b917079938eb6dc73660": {
      "address": "0x080eF9A1D26375b77864D3176C35E482cd1F5A94",
      "txHash": "0xa7e00ae1f3532c54a096222a5a3da260edfdd2b5078fafc1f50da3d3f99fc186",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:465"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:361"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "44133fd6b76fe0e27d99bc1a57dfa5ed4cbc830d1e77b242608d800f1c802341": {
      "address": "0x6fa48322A0e26a8208352112B1217c0A2397CF0D",
      "txHash": "0xadd956a0199eae0505c61d408a4c9a420d76a3c0279fb742cb62d9253c5a8982",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:361"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "b6eda30002551aae03c6a19a844852a7a390af042a40cd8759e65c15388d1f1f": {
      "address": "0x1715f66d491F30FCEC1796571628B9De8568535E",
      "txHash": "0x5bf4fc2715b254623ca7bf50b18e99873a0f6d09e863de24ce661eef8de6242a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18232_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:362"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18232_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18232_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "5d4eba47a8b99d1094b5f8fdd80e1542a9032bab8155f45b4c3571ad28ae9de0": {
      "address": "0x781a283b25233A611Ec397fce37c79b2A41c0Fd9",
      "txHash": "0xa3dc1557cbca8e55773644c2d8f36b127a4970c47ae7ea13a46c6ba9bfe9f9bb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)1820_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:377"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:10"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:36"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)1820_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)1820_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "e33649c760abd67a1ec0f0edbdc79447e1e74a33ac161fbdc08ed8573f34498e": {
      "address": "0xaaD719797fc2b86bB5Cb8Db934929B56eB5f0655",
      "txHash": "0x20ace7b25b27291548245cc2ea369696f46e741318e709549fba50e884d9bd31",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ForwarderReceiverBase",
            "label": "_forwarder",
            "type": "t_address",
            "src": "contracts/meta-tx/ForwarderReceiverBase.sol:7"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)18298_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:42"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:43"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "tokenIdCounter",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:44"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "convertable",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:45"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:47"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Lazy.sol:377"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:11"
          },
          {
            "contract": "ERC1155GlipPass",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155GlipPass.sol:43"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)18298_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)18298_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "a6ad9d74f60308b1502f0a1e740e7a20d114e93bfa05b1f685e0fe1dea5ab7bf": {
      "address": "0x9e5Bab3b61aeAC894e0145c3a42A303122fF76BA",
      "txHash": "0x76ca4707a0009936f443108e949e8e8a53e856b512a99f80664effc3eae09e8d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ForwarderReceiverBase",
            "label": "_forwarder",
            "type": "t_address",
            "src": "contracts/meta-tx/ForwarderReceiverBase.sol:7"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "AuctionValidatorV2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionValidatorV2.sol:15"
          },
          {
            "contract": "AuctionV2",
            "label": "stake",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/exchange/AuctionV2.sol:36"
          },
          {
            "contract": "AuctionV2",
            "label": "auctioneer",
            "type": "t_address",
            "src": "contracts/exchange/AuctionV2.sol:38"
          },
          {
            "contract": "AuctionV2",
            "label": "platformFee",
            "type": "t_uint96",
            "src": "contracts/exchange/AuctionV2.sol:39"
          },
          {
            "contract": "AuctionV2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionV2.sol:315"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7cccf71cbde054064255cc6edf85d9abdd3e07e40c1181d571046738220e2b3a": {
      "address": "0x3E70a15d24DB402D49844F8BE5B4AbE9455acf74",
      "txHash": "0xf0b160e30c87022e944282ce284d600bd400e8dc5cabb9a9c88d512fa29f15a4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ForwarderReceiverBase",
            "label": "_forwarder",
            "type": "t_address",
            "src": "contracts/meta-tx/ForwarderReceiverBase.sol:7"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:9"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155DefaultApproval.sol:26"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "contracts/tokens/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155Base.sol:33"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "creatorSignedRoyalty",
            "type": "t_mapping(t_uint256,t_struct(Part)19520_storage)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:10"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royaltySplitterBytesMap",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/tokens/@rarible/royalties/contracts/impl/AbstractRoyalties.sol:11"
          },
          {
            "contract": "ERC1155LazyOpen",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155LazyOpen.sol:37"
          },
          {
            "contract": "ERC1155LazyOpen",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155LazyOpen.sol:38"
          },
          {
            "contract": "ERC1155LazyOpen",
            "label": "reserves",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/tokens/erc-1155/ERC1155LazyOpen.sol:39"
          },
          {
            "contract": "ERC1155LazyOpen",
            "label": "minter",
            "type": "t_address",
            "src": "contracts/tokens/erc-1155/ERC1155LazyOpen.sol:41"
          },
          {
            "contract": "ERC1155LazyOpen",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1155/ERC1155LazyOpen.sol:308"
          },
          {
            "contract": "ERC1155OpenGlip",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "contracts/tokens/erc-1155/ERC1155OpenGlip.sol:11"
          },
          {
            "contract": "ERC1155OpenGlip",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/erc-1155/ERC1155OpenGlip.sol:43"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(Part)19520_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part)"
          },
          "t_struct(Part)19520_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "0a29eab542b3c2b1e3fdd72565151126d9f2809dd2677af240de6feb353af8f4": {
      "address": "0x5B9d8e3f186f4fEF5B6598A44f606c29c6706838",
      "txHash": "0x8954ea37f7ee71da19f5d5d5bea8788aa7d3adbfca739544aea8a79809d3d050",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ForwarderReceiverBase",
            "label": "_forwarder",
            "type": "t_address",
            "src": "contracts/meta-tx/ForwarderReceiverBase.sol:7"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "AuctionValidatorV2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionValidatorV2.sol:15"
          },
          {
            "contract": "AuctionV2",
            "label": "stake",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/exchange/AuctionV2.sol:36"
          },
          {
            "contract": "AuctionV2",
            "label": "auctioneer",
            "type": "t_address",
            "src": "contracts/exchange/AuctionV2.sol:38"
          },
          {
            "contract": "AuctionV2",
            "label": "platformFee",
            "type": "t_uint96",
            "src": "contracts/exchange/AuctionV2.sol:39"
          },
          {
            "contract": "AuctionV2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionV2.sol:315"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "72c8497cb95769404d6178afbeeae712bf7a71889734380716f831bb727dbcdc": {
      "address": "0xA88Faf7663F285500EDfD0cB8919CE9B8B954101",
      "txHash": "0x4943c04e36b556994b309a98c7aa56ec8eb22c4180983bce0a4ae09978d8657d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ForwarderReceiverBase",
            "label": "_forwarder",
            "type": "t_address",
            "src": "contracts/meta-tx/ForwarderReceiverBase.sol:7"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "AuctionValidatorV2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionValidatorV2.sol:15"
          },
          {
            "contract": "AuctionV2",
            "label": "stake",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/exchange/AuctionV2.sol:36"
          },
          {
            "contract": "AuctionV2",
            "label": "auctioneer",
            "type": "t_address",
            "src": "contracts/exchange/AuctionV2.sol:38"
          },
          {
            "contract": "AuctionV2",
            "label": "platformFee",
            "type": "t_uint96",
            "src": "contracts/exchange/AuctionV2.sol:39"
          },
          {
            "contract": "AuctionV2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionV2.sol:315"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "aa3c7c24295a51c761e512705bae8f16bd831a8b9805079571f84af62afdeade": {
      "address": "0x6Ff58B92e11ee0CD2F62c0ef5589Aee46b4E136f",
      "txHash": "0xfed29aa3f85bd1e6798b5a8187a2bb6e73dcbb9da73037d890a9eef2dab3468f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "contracts/tokens/@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:76"
          },
          {
            "contract": "ForwarderReceiverBase",
            "label": "_forwarder",
            "type": "t_address",
            "src": "contracts/meta-tx/ForwarderReceiverBase.sol:7"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/tokens/erc-1271/ERC1271Validator.sol:36"
          },
          {
            "contract": "AuctionValidatorV2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionValidatorV2.sol:15"
          },
          {
            "contract": "AuctionV2",
            "label": "stake",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/exchange/AuctionV2.sol:36"
          },
          {
            "contract": "AuctionV2",
            "label": "auctioneer",
            "type": "t_address",
            "src": "contracts/exchange/AuctionV2.sol:38"
          },
          {
            "contract": "AuctionV2",
            "label": "platformFee",
            "type": "t_uint96",
            "src": "contracts/exchange/AuctionV2.sol:39"
          },
          {
            "contract": "AuctionV2",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/exchange/AuctionV2.sol:319"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
